<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BingX.Net</name>
    </assembly>
    <members>
        <member name="T:BingX.Net.BingXEnvironment">
            <summary>
            BingX environments
            </summary>
        </member>
        <member name="P:BingX.Net.BingXEnvironment.RestClientAddress">
            <summary>
            Rest API address
            </summary>
        </member>
        <member name="P:BingX.Net.BingXEnvironment.SocketClientSpotAddress">
            <summary>
            Socket Spot API address
            </summary>
        </member>
        <member name="P:BingX.Net.BingXEnvironment.SocketClientSwapAddress">
            <summary>
            Socket Swap API address
            </summary>
        </member>
        <member name="M:BingX.Net.BingXEnvironment.#ctor">
            <summary>
            ctor for DI, use <see cref="M:BingX.Net.BingXEnvironment.CreateCustom(System.String,System.String,System.String,System.String)"/> for creating a custom environment
            </summary>
        </member>
        <member name="M:BingX.Net.BingXEnvironment.GetEnvironmentByName(System.String)">
            <summary>
            Get the BingX environment by name
            </summary>
        </member>
        <member name="P:BingX.Net.BingXEnvironment.Live">
            <summary>
            Live environment
            </summary>
        </member>
        <member name="P:BingX.Net.BingXEnvironment.Demo">
            <summary>
            Demo environment. Note that this only applies to trading VST
            </summary>
        </member>
        <member name="M:BingX.Net.BingXEnvironment.CreateCustom(System.String,System.String,System.String,System.String)">
            <summary>
            Create a custom environment
            </summary>
            <param name="name"></param>
            <param name="spotRestAddress"></param>
            <param name="spotSocketAddress"></param>
            <param name="swapSocketAddress"></param>
            <returns></returns>
        </member>
        <member name="T:BingX.Net.BingXExchange">
            <summary>
            BingX exchange information and configuration
            </summary>
        </member>
        <member name="P:BingX.Net.BingXExchange.ExchangeName">
            <summary>
            Exchange name
            </summary>
        </member>
        <member name="P:BingX.Net.BingXExchange.DisplayName">
            <summary>
            Exchange name
            </summary>
        </member>
        <member name="P:BingX.Net.BingXExchange.ImageUrl">
            <summary>
            Url to exchange image
            </summary>
        </member>
        <member name="P:BingX.Net.BingXExchange.Url">
            <summary>
            Url to the main website
            </summary>
        </member>
        <member name="P:BingX.Net.BingXExchange.ApiDocsUrl">
            <summary>
            Urls to the API documentation
            </summary>
        </member>
        <member name="P:BingX.Net.BingXExchange.Type">
            <summary>
            Type of exchange
            </summary>
        </member>
        <member name="M:BingX.Net.BingXExchange.FormatSymbol(System.String,System.String,CryptoExchange.Net.SharedApis.TradingMode,System.Nullable{System.DateTime})">
            <summary>
            Format a base and quote asset to a BingX recognized symbol 
            </summary>
            <param name="baseAsset">Base asset</param>
            <param name="quoteAsset">Quote asset</param>
            <param name="tradingMode">Trading mode</param>
            <param name="deliverTime">Delivery time for delivery futures</param>
            <returns></returns>
        </member>
        <member name="P:BingX.Net.BingXExchange.RateLimiter">
            <summary>
            Rate limiter configuration for the BingX API
            </summary>
        </member>
        <member name="T:BingX.Net.BingXRateLimiters">
            <summary>
            Rate limiter configuration for the BingX API
            </summary>
        </member>
        <member name="E:BingX.Net.BingXRateLimiters.RateLimitTriggered">
            <summary>
            Event for when a rate limit is triggered
            </summary>
        </member>
        <member name="T:BingX.Net.BingXTrackerFactory">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.BingXTrackerFactory.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:BingX.Net.BingXTrackerFactory.#ctor(System.IServiceProvider)">
            <summary>
            ctor
            </summary>
            <param name="serviceProvider">Service provider for resolving logging and clients</param>
        </member>
        <member name="M:BingX.Net.BingXTrackerFactory.CreateKlineTracker(CryptoExchange.Net.SharedApis.SharedSymbol,CryptoExchange.Net.SharedApis.SharedKlineInterval,System.Nullable{System.Int32},System.Nullable{System.TimeSpan})">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.BingXTrackerFactory.CreateTradeTracker(CryptoExchange.Net.SharedApis.SharedSymbol,System.Nullable{System.Int32},System.Nullable{System.TimeSpan})">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.Apis.BingXRestClientSubAccountApi">
            <inheritdoc cref="T:BingX.Net.Interfaces.Clients.Apis.IBingXRestClientSubAccountApi" />
        </member>
        <member name="M:BingX.Net.Clients.Apis.BingXRestClientSubAccountApi.GetApiKeyPermissionsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.Apis.BingXRestClientSubAccountApi.GetServerTimestampAsync">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.Apis.BingXRestClientSubAccountApi.GetTimeSyncInfo">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.Apis.BingXRestClientSubAccountApi.GetTimeOffset">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.BingXRestClient">
            <inheritdoc cref="T:BingX.Net.Interfaces.Clients.IBingXRestClient" />
        </member>
        <member name="P:BingX.Net.Clients.BingXRestClient.SpotApi">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Clients.BingXRestClient.PerpetualFuturesApi">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Clients.BingXRestClient.SubAccountApi">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.BingXRestClient.#ctor(System.Action{BingX.Net.Objects.Options.BingXRestOptions})">
            <summary>
            Create a new instance of the BingXRestClient using provided options
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:BingX.Net.Clients.BingXRestClient.#ctor(System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Options.IOptions{BingX.Net.Objects.Options.BingXRestOptions})">
            <summary>
            Create a new instance of the BingXRestClient using provided options
            </summary>
            <param name="options">Option configuration</param>
            <param name="loggerFactory">The logger factory</param>
            <param name="httpClient">Http client for this client</param>
        </member>
        <member name="M:BingX.Net.Clients.BingXRestClient.SetOptions(CryptoExchange.Net.Objects.Options.UpdateOptions)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.BingXRestClient.SetDefaultOptions(System.Action{BingX.Net.Objects.Options.BingXRestOptions})">
            <summary>
            Set the default options to be used when creating new clients
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:BingX.Net.Clients.BingXRestClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.BingXRestClientApi">
            <summary>
            BingX rest client base
            </summary>
        </member>
        <member name="P:BingX.Net.Clients.BingXRestClientApi.ExchangeName">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.BingXRestClientApi.FormatSymbol(System.String,System.String,CryptoExchange.Net.SharedApis.TradingMode,System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.BingXRestClientApi.CreateSerializer">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.BingXRestClientApi.CreateAccessor">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.BingXRestClientApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.BingXRestClientApi.TryParseError(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}},CryptoExchange.Net.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.BingXRestClientApi.WriteParamBody(CryptoExchange.Net.Interfaces.IRequest,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.BingXRestClientApi.GetSymbolName(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.BingXSocketClient">
            <inheritdoc cref="T:BingX.Net.Interfaces.Clients.IBingXSocketClient" />
        </member>
        <member name="P:BingX.Net.Clients.BingXSocketClient.SpotApi">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Clients.BingXSocketClient.PerpetualFuturesApi">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.BingXSocketClient.#ctor(System.Action{BingX.Net.Objects.Options.BingXSocketOptions})">
            <summary>
            Create a new instance of BingXSocketClient
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:BingX.Net.Clients.BingXSocketClient.#ctor(Microsoft.Extensions.Options.IOptions{BingX.Net.Objects.Options.BingXSocketOptions},Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Create a new instance of BingXSocketClient
            </summary>
            <param name="loggerFactory">The logger factory</param>
            <param name="options">Option configuration</param>
        </member>
        <member name="M:BingX.Net.Clients.BingXSocketClient.SetOptions(CryptoExchange.Net.Objects.Options.UpdateOptions)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.BingXSocketClient.SetDefaultOptions(System.Action{BingX.Net.Objects.Options.BingXSocketOptions})">
            <summary>
            Set the default options to be used when creating new clients
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:BingX.Net.Clients.BingXSocketClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApi">
            <inheritdoc cref="T:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApi" />
        </member>
        <member name="P:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApi.Account">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApi.ExchangeData">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApi.Trading">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApi.GetServerTimestampAsync">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApi.GetTimeSyncInfo">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApi.GetTimeOffset">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiAccount">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiAccount.GetIncomesAsync(System.String,System.Nullable{BingX.Net.Enums.IncomeType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiAccount.GetTradingFeesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiAccount.StartUserStreamAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiAccount.KeepAliveUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiAccount.StopUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiAccount.GetMarginModeAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiAccount.SetMarginModeAsync(System.String,BingX.Net.Enums.MarginMode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiAccount.GetLeverageAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiAccount.SetLeverageAsync(System.String,BingX.Net.Enums.PositionSide,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiAccount.AdjustIsolatedMarginAsync(System.String,System.Decimal,BingX.Net.Enums.AdjustDirection,BingX.Net.Enums.PositionSide,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiAccount.GetPositionModeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiAccount.SetPositionModeAsync(BingX.Net.Enums.PositionMode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiAccount.GetIsolatedMarginChangeHistoryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiAccount.ApplyForVSTAssetsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiAccount.SetMultiAssetModeAsync(BingX.Net.Enums.MultiAssetMode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiAccount.GetMultiAssetModeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiAccount.GetMultiAssetRulesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiAccount.GetMultiAssetsMarginAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiExchangeData">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiExchangeData.GetContractsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiExchangeData.GetOrderBookAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiExchangeData.GetRecentTradesAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiExchangeData.GetFundingRateAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiExchangeData.GetFundingRatesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiExchangeData.GetFundingRateHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiExchangeData.GetKlinesAsync(System.String,BingX.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiExchangeData.GetMarkPriceKlinesAsync(System.String,BingX.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiExchangeData.GetOpenInterestAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiExchangeData.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiExchangeData.GetTickersAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiExchangeData.GetBookTickerAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiExchangeData.GetLastTradePriceAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiExchangeData.GetLastTradePricesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiTrading">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiTrading.GetPositionsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiTrading.PlaceTestOrderAsync(System.String,BingX.Net.Enums.OrderSide,BingX.Net.Enums.FuturesOrderType,BingX.Net.Enums.PositionSide,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{BingX.Net.Enums.TakeProfitStopLossMode},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{BingX.Net.Enums.TriggerType},System.Nullable{System.Boolean},System.Nullable{BingX.Net.Enums.TakeProfitStopLossMode},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{BingX.Net.Enums.TriggerType},System.Nullable{System.Boolean},System.Nullable{BingX.Net.Enums.TimeInForce},System.Nullable{System.Boolean},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiTrading.PlaceOrderAsync(System.String,BingX.Net.Enums.OrderSide,BingX.Net.Enums.FuturesOrderType,BingX.Net.Enums.PositionSide,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{BingX.Net.Enums.TakeProfitStopLossMode},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{BingX.Net.Enums.TriggerType},System.Nullable{System.Boolean},System.Nullable{BingX.Net.Enums.TakeProfitStopLossMode},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{BingX.Net.Enums.TriggerType},System.Nullable{System.Boolean},System.Nullable{BingX.Net.Enums.TimeInForce},System.Nullable{System.Boolean},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiTrading.PlaceMultipleOrderAsync(System.Collections.Generic.IEnumerable{BingX.Net.Objects.Models.BingXFuturesPlaceOrderRequest},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiTrading.GetOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiTrading.CancelOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiTrading.CloseAllPositionsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiTrading.CancelMultipleOrderAsync(System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiTrading.CancelAllOrderAsync(System.String,System.Nullable{BingX.Net.Enums.OrderType},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiTrading.GetOpenOrdersAsync(System.String,System.Nullable{BingX.Net.Enums.OrderType},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiTrading.GetLiquidationOrdersAsync(System.String,System.Nullable{BingX.Net.Enums.AutoCloseType},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiTrading.GetClosedOrdersAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiTrading.GetUserTradesAsync(System.Nullable{System.Int64},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiTrading.GetUserTradesAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiTrading.CancelAllOrdersAfterAsync(System.Boolean,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiTrading.ClosePositionAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiTrading.GetOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiTrading.GetPositionAndMarginInfoAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiTrading.GetPositionHistoryAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiTrading.PlaceTwapOrderAsync(System.String,BingX.Net.Enums.OrderSide,BingX.Net.Enums.PositionSide,BingX.Net.Enums.PriceType,System.Decimal,System.Decimal,System.Int32,System.Decimal,System.Decimal,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiTrading.GetOpenTwapOrdersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiTrading.GetClosedTwapOrdersAsync(System.String,System.Int32,System.Int32,System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiTrading.GetTwapOrderAsync(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXRestClientPerpetualFuturesApiTrading.CancelTwapOrderAsync(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.PerpetualFuturesApi.BingXSocketClientPerpetualFuturesApi">
            <summary>
            Client providing access to the BingX futures websocket Api
            </summary>
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXSocketClientPerpetualFuturesApi.#ctor(Microsoft.Extensions.Logging.ILogger,BingX.Net.Objects.Options.BingXSocketOptions)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXSocketClientPerpetualFuturesApi.FormatSymbol(System.String,System.String,CryptoExchange.Net.SharedApis.TradingMode,System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXSocketClientPerpetualFuturesApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXSocketClientPerpetualFuturesApi.CreateSerializer">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXSocketClientPerpetualFuturesApi.CreateAccessor">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXSocketClientPerpetualFuturesApi.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{BingX.Net.Objects.Models.BingXFuturesTradeUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXSocketClientPerpetualFuturesApi.SubscribeToPartialOrderBookUpdatesAsync(System.String,System.Int32,System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXOrderBook}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXSocketClientPerpetualFuturesApi.SubscribeToPartialOrderBookUpdatesAsync(System.Int32,System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXOrderBook}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXSocketClientPerpetualFuturesApi.SubscribeToKlineUpdatesAsync(BingX.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{BingX.Net.Objects.Models.BingXFuturesKlineUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXSocketClientPerpetualFuturesApi.SubscribeToKlineUpdatesAsync(System.String,BingX.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{BingX.Net.Objects.Models.BingXFuturesKlineUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXSocketClientPerpetualFuturesApi.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXFuturesTickerUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXSocketClientPerpetualFuturesApi.SubscribeToTickerUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXFuturesTickerUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXSocketClientPerpetualFuturesApi.SubscribeToPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXPriceUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXSocketClientPerpetualFuturesApi.SubscribeToMarkPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXMarkPriceUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXSocketClientPerpetualFuturesApi.SubscribeToBookPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXBookTickerUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXSocketClientPerpetualFuturesApi.SubscribeToUserDataUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXFuturesAccountUpdate}},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXFuturesOrderUpdate}},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXConfigUpdate}},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXListenKeyExpiredUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXSocketClientPerpetualFuturesApi.PreprocessStreamMessage(CryptoExchange.Net.Sockets.SocketConnection,System.Net.WebSockets.WebSocketMessageType,System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXSocketClientPerpetualFuturesApi.GetListenerIdentifier(CryptoExchange.Net.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.PerpetualFuturesApi.BingXSocketClientPerpetualFuturesApi.GetAuthenticationRequestAsync(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi">
            <inheritdoc cref="T:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApi" />
        </member>
        <member name="P:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.Account">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.ExchangeData">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.Trading">
            <inheritdoc />
        </member>
        <member name="E:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.OnOrderPlaced">
            <summary>
            Event triggered when an order is placed via this client. Only available for Spot orders
            </summary>
        </member>
        <member name="E:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.OnOrderCanceled">
            <summary>
            Event triggered when an order is canceled via this client. Note that this does not trigger when using CancelAllOrdersAsync. Only available for Spot orders
            </summary>
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.GetServerTimestampAsync">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.GetTimeSyncInfo">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.GetTimeOffset">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.CommonSpotClient">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.GetDepositHistoryAsync(System.String,System.Nullable{BingX.Net.Enums.DepositStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.GetWithdrawalHistoryAsync(System.String,System.String,System.String,System.Nullable{BingX.Net.Enums.WithdrawalStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.GetAssetsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.WithdrawAsync(System.String,System.String,System.Decimal,BingX.Net.Enums.AccountType,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.GetDepositAddressAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.TransferAsync(BingX.Net.Enums.TransferType,System.String,System.Decimal,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.GetTransfersAsync(BingX.Net.Enums.TransferType,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.TransferInternalAsync(System.String,BingX.Net.Enums.AccountIdentifierType,System.String,System.Decimal,BingX.Net.Enums.AccountType,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.GetInternalTransfersAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.StartUserStreamAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.KeepAliveUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.StopUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.GetTradingFeesAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.GetUserIdAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.GetApiKeyPermissionsAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiExchangeData">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiExchangeData.GetSymbolsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiExchangeData.GetRecentTradesAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiExchangeData.GetOrderBookAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiExchangeData.GetAggregatedOrderBookAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiExchangeData.GetKlinesAsync(System.String,BingX.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiExchangeData.GetTickersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiExchangeData.GetLastTradeAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiExchangeData.GetLastTradesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiExchangeData.GetBookPriceAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiTrading">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiTrading.PlaceOrderAsync(System.String,BingX.Net.Enums.OrderSide,BingX.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{BingX.Net.Enums.TimeInForce},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiTrading.PlaceMultipleOrdersAsync(System.Collections.Generic.IEnumerable{BingX.Net.Objects.Models.BingXPlaceOrderRequest},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiTrading.CancelOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiTrading.CancelOrdersAsync(System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiTrading.CancelAllOrdersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiTrading.CancelAllOrdersAfterAsync(System.Boolean,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiTrading.GetOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiTrading.GetOpenOrdersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiTrading.GetOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{BingX.Net.Enums.OrderStatus},System.Nullable{BingX.Net.Enums.OrderType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiTrading.GetUserTradesAsync(System.String,System.Nullable{System.Int64},System.Nullable{BingX.Net.Enums.OrderStatus},System.Nullable{BingX.Net.Enums.OrderType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiTrading.PlaceOcoOrderAsync(System.String,BingX.Net.Enums.OrderSide,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiTrading.CancelOcoOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiTrading.GetOcoOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiTrading.GetOpenOcoOrdersAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiTrading.GetClosedOcoOrdersAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi">
            <summary>
            Client providing access to the BingX spot websocket Api
            </summary>
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.#ctor(Microsoft.Extensions.Logging.ILogger,BingX.Net.Objects.Options.BingXSocketOptions)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.FormatSymbol(System.String,System.String,CryptoExchange.Net.SharedApis.TradingMode,System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.CreateSerializer">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.CreateAccessor">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXTradeUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.SubscribeToKlineUpdatesAsync(System.String,BingX.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXKlineUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.SubscribeToPartialOrderBookUpdatesAsync(System.String,System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXOrderBook}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXTickerUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.SubscribeToPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXPriceUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.SubscribeToBookPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXBookTickerUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.SubscribeToOrderUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXOrderUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.SubscribeToBalanceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXBalanceUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.PreprocessStreamMessage(CryptoExchange.Net.Sockets.SocketConnection,System.Net.WebSockets.WebSocketMessageType,System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.GetListenerIdentifier(CryptoExchange.Net.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.GetAuthenticationRequestAsync(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Enums.AccountIdentifierType">
            <summary>
            Account identifier type
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.AccountIdentifierType.Uid">
            <summary>
            Unique id
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.AccountIdentifierType.PhoneNumber">
            <summary>
            Phone number
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.AccountIdentifierType.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.AccountType">
            <summary>
            Account type
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.AccountType.Funding">
            <summary>
            Funding account
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.AccountType.Standard">
            <summary>
            Standard account
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.AccountType.Perpetual">
            <summary>
            Perpetual account
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.AdjustDirection">
            <summary>
            Direction to adjust in
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.AdjustDirection.Increase">
            <summary>
            Increase
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.AdjustDirection.Decrease">
            <summary>
            Decrease
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.ApiKeyPermission">
            <summary>
            API key permission types
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.ApiKeyPermission.SpotTrading">
            <summary>
            Spot trading
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.ApiKeyPermission.Read">
            <summary>
            Read
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.ApiKeyPermission.PerpetualFuturesTrading">
            <summary>
            Perpetual futures trading
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.ApiKeyPermission.UniversalTransfer">
            <summary>
            Universal transfer
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.ApiKeyPermission.Undocumented6">
            <summary>
            Permission 6
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.ApiKeyPermission.InternalTransferOfSubaccounts">
            <summary>
            Internal transfer of sub accounts
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.MultiAssetMode">
            <summary>
            Multi asset mode
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.MultiAssetMode.SingleAssetMode">
            <summary>
            Single asset mode
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.MultiAssetMode.MultiAssetMode">
            <summary>
            Multi asset mode
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.AutoCloseType">
            <summary>
            Auto closed order type
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.AutoCloseType.Liquidation">
            <summary>
            Liquidation
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.AutoCloseType.Adl">
            <summary>
            Adl
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.DepositStatus">
            <summary>
            Deposit status
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.DepositStatus.InProgress">
            <summary>
            In progress
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.DepositStatus.ChainUploaded">
            <summary>
            Chain uploaded
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.DepositStatus.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.FuturesOrderType">
            <summary>
            Order type
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.FuturesOrderType.Market">
            <summary>
            Market order
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.FuturesOrderType.Limit">
            <summary>
            Limit order
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.FuturesOrderType.TakeProfitMarket">
            <summary>
            Take profit market order
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.FuturesOrderType.StopMarket">
            <summary>
            Stop market order
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.FuturesOrderType.StopLimit">
            <summary>
            Stop limit order
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.FuturesOrderType.TakeProfitLimit">
            <summary>
            Take profit limit order
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.FuturesOrderType.TriggerLimit">
            <summary>
            Stop Limit Order with Trigger
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.FuturesOrderType.TriggerMarket">
            <summary>
            Stop Market Order with Trigger
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.FuturesOrderType.TrailingStopMarket">
            <summary>
            Trailing stop market order
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.FuturesOrderType.TrailingTpSl">
            <summary>
            Trailing TakeProfit or StopLoss
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.IncomeType">
            <summary>
            Income type
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.IncomeType.Transfer">
            <summary>
            Transfer
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.IncomeType.RealizedPnl">
            <summary>
            Realized profit and loss
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.IncomeType.FundingFee">
            <summary>
            Funding Fee
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.IncomeType.TradingFee">
            <summary>
            Trading Fee
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.IncomeType.InsuranceClear">
            <summary>
            Liquidation
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.IncomeType.TrailFund">
            <summary>
            Trial Fund
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.IncomeType.Adl">
            <summary>
            Automatic Deleveraging
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.IncomeType.SystemDeduction">
            <summary>
            System deduction
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.IncomeType.GtdPrice">
            <summary>
            Guaranteed price
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.InternalTransferStatus">
            <summary>
            Internal transfer status
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.InternalTransferStatus.PendingReview">
            <summary>
            Pending review
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.InternalTransferStatus.Failed">
            <summary>
            Failed
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.InternalTransferStatus.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.KlineInterval">
            <summary>
            Kline interval
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.OneMinute">
            <summary>
            One minute
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.ThreeMinutes">
            <summary>
            Three minutes
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.FiveMinutes">
            <summary>
            Five minutes
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.FifteenMinutes">
            <summary>
            Fifteen minutes
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.ThirtyMinutes">
            <summary>
            Thirty minutes
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.OneHour">
            <summary>
            One hour
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.TwoHours">
            <summary>
            Two hours
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.FourHours">
            <summary>
            Four hours
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.SixHours">
            <summary>
            Six hours
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.EightHours">
            <summary>
            Eight hours
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.TwelveHours">
            <summary>
            Twelve hours
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.OneDay">
            <summary>
            One day
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.ThreeDay">
            <summary>
            Three days
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.OneWeek">
            <summary>
            One week
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.OneMonth">
            <summary>
            One month
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.MarginMode">
            <summary>
            Margin mode
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.MarginMode.Isolated">
            <summary>
            Isolated margin mode
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.MarginMode.Cross">
            <summary>
            Cross margin mode
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.OcoOrderType">
            <summary>
            Order type
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.OcoOrderType.OcoLimit">
            <summary>
            Oco limit order
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.OcoOrderType.OcoStopLimit">
            <summary>
            Oco stop limit order
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.OrderSide">
            <summary>
            Order side
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.OrderSide.Buy">
            <summary>
            Buy
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.OrderSide.Sell">
            <summary>
            Sell
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.OrderStatus">
            <summary>
            Order status
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.OrderStatus.New">
            <summary>
            New order
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.OrderStatus.Pending">
            <summary>
            Pending
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.OrderStatus.PartiallyFilled">
            <summary>
            Partially filled
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.OrderStatus.Filled">
            <summary>
            Filled
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.OrderStatus.Canceled">
            <summary>
            Canceled
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.OrderStatus.Failed">
            <summary>
            Failed
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.OrderType">
            <summary>
            Order type
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.OrderType.Market">
            <summary>
            Market order
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.OrderType.Limit">
            <summary>
            Limit order
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.OrderType.StopLimit">
            <summary>
            Stop limit order
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.OrderType.StopMarket">
            <summary>
            Stop market order
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.OrderType.TriggerLimit">
            <summary>
            Trigger limit order
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.OrderType.TriggerMarket">
            <summary>
            Trigger market order
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.PositionMode">
            <summary>
            Position mode
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.PositionMode.DualPositionMode">
            <summary>
            Dual position mode
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.PositionMode.SinglePositionMode">
            <summary>
            Single position mode
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.PositionSide">
            <summary>
            Position side
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.PositionSide.Long">
            <summary>
            Long position
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.PositionSide.Short">
            <summary>
            Short position
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.PositionSide.Both">
            <summary>
            Both
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.PriceType">
            <summary>
            Price type
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.PriceType.Constant">
            <summary>
            Constant
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.PriceType.Percentage">
            <summary>
            Percentage
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.Role">
            <summary>
            Role
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.Role.Maker">
            <summary>
            Maker
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.Role.Taker">
            <summary>
            Taker
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.SymbolStatus">
            <summary>
            Status of a symbol
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.SymbolStatus.Offline">
            <summary>
            Offline
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.SymbolStatus.Online">
            <summary>
            Online
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.SymbolStatus.PreOpen">
            <summary>
            Pre-open
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.SymbolStatus.Suspended">
            <summary>
            Trading suspended
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.TakeProfitStopLossMode">
            <summary>
            Take Profit / Stop Loss mode
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TakeProfitStopLossMode.StopMarket">
            <summary>
            Stop loss market order
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TakeProfitStopLossMode.Stop">
            <summary>
            Stop loss limit order
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TakeProfitStopLossMode.TakeProfitMarket">
            <summary>
            Take profit market order
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TakeProfitStopLossMode.TakeProfit">
            <summary>
            Take profit limit order
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.TimeInForce">
            <summary>
            Time in force
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TimeInForce.PostOnly">
            <summary>
            Post only order
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TimeInForce.GoodTillCanceled">
            <summary>
            Good till canceled
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TimeInForce.ImmediateOrCancel">
            <summary>
            At least partially fill the order upon placement or cancel
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TimeInForce.FillOrKill">
            <summary>
            Fill the order upon placement or cancel
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.TradeSide">
            <summary>
            Trade side
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TradeSide.Long">
            <summary>
            Long position
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TradeSide.Short">
            <summary>
            Short position
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.TransferType">
            <summary>
            Transfer type
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TransferType.FundingToStandardFutures">
            <summary>
            Funding Account -> Standard Contract
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TransferType.StandardFuturesToFunding">
            <summary>
            Standard Contract -> Funding Account
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TransferType.FundingToPerpetualFutures">
            <summary>
            Funding Account -> Perpetual Futures
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TransferType.PerpetualFuturesToFunding">
            <summary>
            Perpetual Futures -> Funding Account
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TransferType.StandardFuturesToPerpetualFutures">
            <summary>
            Standard Contract -> Perpetual Futures
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TransferType.PerpetualFuturesToStandardFutures">
            <summary>
            Perpetual Futures -> Standard Contract
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.TriggerType">
            <summary>
            Trigger price type
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TriggerType.MarkPrice">
            <summary>
            Mark price
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TriggerType.LastPrice">
            <summary>
            Last price
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TriggerType.IndexPrice">
            <summary>
            Index price
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.TwapOrderStatus">
            <summary>
            Twap order status
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TwapOrderStatus.New">
            <summary>
            New
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TwapOrderStatus.Running">
            <summary>
            Executing
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TwapOrderStatus.Canceling">
            <summary>
            Canceling
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TwapOrderStatus.Filled">
            <summary>
            Fully filled
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TwapOrderStatus.PartiallyFilled">
            <summary>
            Partially filled
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TwapOrderStatus.Pending">
            <summary>
            Pending
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TwapOrderStatus.PartiallyFilledAndResidueFailed">
            <summary>
            Partially filled, remaining order failed
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TwapOrderStatus.PartiallyFilledAndResidueCancelled">
            <summary>
            Partially filled, remaining cancellation
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TwapOrderStatus.Cancelled">
            <summary>
            Canceled
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TwapOrderStatus.Failed">
            <summary>
            Order failed
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.WithdrawalStatus">
            <summary>
            Withdrawal status
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.WithdrawalStatus.UnderReview">
            <summary>
            Under review
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.WithdrawalStatus.Failed">
            <summary>
            Failed
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.WithdrawalStatus.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:BingX.Net.ExtensionMethods.BingXExtensionMethods">
            <summary>
            Extension methods specific to using the BingX API
            </summary>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.Apis.IBingXRestClientSubAccountApi">
            <summary>
            BingX sub account API endpoints
            </summary>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.Apis.IBingXRestClientSubAccountApi.GetApiKeyPermissionsAsync(System.Threading.CancellationToken)">
            <summary>
            Get the permissions of the API key
            <para><a href="https://bingx-api.github.io/docs/#/en-us/common/sub-account#Query%20user%20API%20Key%20permissions" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.IBingXRestClient">
            <summary>
            Client for accessing the BingX Rest API. 
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.IBingXRestClient.SpotApi">
            <summary>
            Spot API endpoints
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.IBingXRestClient.PerpetualFuturesApi">
            <summary>
            Perpetual Futures API endpoints
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.IBingXRestClient.SubAccountApi">
            <summary>
            Sub account API endpoints
            </summary>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.IBingXRestClient.SetOptions(CryptoExchange.Net.Objects.Options.UpdateOptions)">
            <summary>
            Update specific options
            </summary>
            <param name="options">Options to update. Only specific options are changable after the client has been created</param>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.IBingXRestClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <summary>
            Set the API credentials for this client. All Api clients in this client will use the new credentials, regardless of earlier set options.
            </summary>
            <param name="credentials">The credentials to set</param>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.IBingXSocketClient">
            <summary>
            Client for accessing the BingX websocket API
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.IBingXSocketClient.SpotApi">
            <summary>
            Spot streams
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.IBingXSocketClient.PerpetualFuturesApi">
            <summary>
            Perpetual Futures streams
            </summary>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.IBingXSocketClient.SetOptions(CryptoExchange.Net.Objects.Options.UpdateOptions)">
            <summary>
            Update specific options
            </summary>
            <param name="options">Options to update. Only specific options are changable after the client has been created</param>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.IBingXSocketClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <summary>
            Set the API credentials for this client. All Api clients in this client will use the new credentials, regardless of earlier set options.
            </summary>
            <param name="credentials">The credentials to set</param>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApi">
            <summary>
            BingX futures API endpoints
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApi.Account">
            <summary>
            Endpoints related to account settings, info or actions
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApi.ExchangeData">
            <summary>
            Endpoints related to retrieving market data
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApi.Trading">
            <summary>
            Endpoints related to orders and trades
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApi.SharedClient">
            <summary>
            Get the shared rest requests client. This interface is shared with other exhanges to allow for a common implementation for different exchanges.
            </summary>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiAccount">
            <summary>
            BingX futures account endpoints. Account endpoints include balance info, withdraw/deposit info and requesting and account settings
            </summary>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <summary>
            Get balance info
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/account-api.html#Query%20account%20data" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiAccount.GetIncomesAsync(System.String,System.Nullable{BingX.Net.Enums.IncomeType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get income history
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/account-api.html#Get%20Account%20Profit%20and%20Loss%20Fund%20Flow" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETH-USDT`</param>
            <param name="incomeType">Filter by income type</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiAccount.GetTradingFeesAsync(System.Threading.CancellationToken)">
            <summary>
            Get trading fee rates
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/account-api.html#User%20fee%20rate" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiAccount.StartUserStreamAsync(System.Threading.CancellationToken)">
            <summary>
            Generate a listen key used for subscribing to user data streams with the socket client
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/account-api.html#Query%20Trading%20Commission%20Rate" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiAccount.KeepAliveUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Extend the lifetime of a listenkey with 60 minutes
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/socket/listenKey.html#extend%20Listen%20Key%20Validity%20period" /></para>
            </summary>
            <param name="listenKey">Listen key</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiAccount.StopUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete a listenkey and stop the user data stream
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/socket/listenKey.html#delete%20Listen%20Key" /></para>
            </summary>
            <param name="listenKey">Listen key</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiAccount.GetMarginModeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the current margin mode for a symbol
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Query%20Margin%20Type" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH-USDT`</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiAccount.SetMarginModeAsync(System.String,BingX.Net.Enums.MarginMode,System.Threading.CancellationToken)">
            <summary>
            Change the margin mode for a symbol
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Change%20Margin%20Type" /></para>
            </summary>=
            <param name="symbol">Symbol, for example `ETH-USDT`</param>
            <param name="marginMode">New margin mode</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiAccount.GetLeverageAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the current leverage settings for a symbol
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Query%20Leverage" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH-USDT`</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiAccount.SetLeverageAsync(System.String,BingX.Net.Enums.PositionSide,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Set new leverage settings for a symbol
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Switch%20Leverage" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH-USDT`</param>
            <param name="side">Position side. In the One-way mode, only supports BOTH.</param>
            <param name="leverage">Leverage</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiAccount.AdjustIsolatedMarginAsync(System.String,System.Decimal,BingX.Net.Enums.AdjustDirection,BingX.Net.Enums.PositionSide,System.Threading.CancellationToken)">
            <summary>
            Adjust isolated margin for a position
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Set%20Leverage" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH-USDT`</param>
            <param name="quantity">Quantity to adjust with</param>
            <param name="direction">Direction</param>
            <param name="side">Position side</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiAccount.GetPositionModeAsync(System.Threading.CancellationToken)">
            <summary>
            Get current position mode
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Query%20position%20mode" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiAccount.SetPositionModeAsync(BingX.Net.Enums.PositionMode,System.Threading.CancellationToken)">
            <summary>
            Set position mode
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Set%20Position%20Mode" /></para>
            </summary>
            <param name="positionMode">Position mode</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiAccount.GetIsolatedMarginChangeHistoryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get history of margin changes
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Isolated%20Margin%20Change%20History" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETH-USDT`</param>
            <param name="positionId">Filter by positionId</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">Page</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiAccount.ApplyForVSTAssetsAsync(System.Threading.CancellationToken)">
            <summary>
            Apply for receiving VST assets. Only available on the VST environment
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Apply%20VST" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiAccount.SetMultiAssetModeAsync(BingX.Net.Enums.MultiAssetMode,System.Threading.CancellationToken)">
            <summary>
            Set multi asset mode
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Switch%20Multi-Assets%20Mode" /></para>
            </summary>
            <param name="assetMode">Multi asset mode</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiAccount.GetMultiAssetModeAsync(System.Threading.CancellationToken)">
            <summary>
            Get current multi asset mode
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Query%20Multi-Assets%20Mode" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiAccount.GetMultiAssetRulesAsync(System.Threading.CancellationToken)">
            <summary>
            Get multi asset mode rules
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Query%20Multi-Assets%20Rules" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiAccount.GetMultiAssetsMarginAsync(System.Threading.CancellationToken)">
            <summary>
            Get multi assets margin
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Query%20Multi-Assets%20Margin" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiExchangeData">
            <summary>
            BingX futures exchange data endpoints. Exchange data includes market data (tickers, order books, etc) and system status.
            </summary>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <summary>
            Get the current server time
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/base-info.html#Get%20Server%20Time" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiExchangeData.GetContractsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get list of contracts
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/market-api.html#USDT-M%20Perp%20Futures%20symbols" /></para>
            </summary>
            <param name="symbol">Filter by symbol name, for example `ETH-USDT`</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiExchangeData.GetOrderBookAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get order book for a symbol
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/market-api.html#Order%20Book" /></para>
            </summary>
            <param name="symbol">Symbol name, for example `ETH-USDT`</param>
            <param name="limit">Number of rows in the book, 5, 10, 20, 50, 100, 500 or 1000</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiExchangeData.GetRecentTradesAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get list of the most recent trades
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/market-api.html#Recent%20Trades%20List" /></para>
            </summary>
            <param name="symbol">Symbol name, for example `ETH-USDT`</param>
            <param name="limit">Number of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get list of trades
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/market-api.html#Query%20historical%20transaction%20orders" /></para>
            </summary>
            <param name="symbol">Symbol name, for example `ETH-USDT`</param>
            <param name="fromId">Return trades after this</param>
            <param name="limit">Number of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiExchangeData.GetFundingRateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the current funding rate for a symbol
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/market-api.html#Mark%20Price%20and%20Funding%20Rate" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH-USDT`</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiExchangeData.GetFundingRatesAsync(System.Threading.CancellationToken)">
            <summary>
            Get the current funding rate for all symbols
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/market-api.html#Mark%20Price%20and%20Funding%20Rate" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiExchangeData.GetFundingRateHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get funding rate history
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/market-api.html#Get%20Funding%20Rate%20History" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH-USDT`</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max amount of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiExchangeData.GetKlinesAsync(System.String,BingX.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get kline history
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/market-api.html#Kline/Candlestick%20Data" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH-USDT`</param>
            <param name="interval">Kline interval</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max amount of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiExchangeData.GetOpenInterestAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get open interest
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/market-api.html#Open%20Interest%20Statistics" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH-USDT`</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiExchangeData.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get ticker (24h price stats) for a symbol
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/market-api.html#24hr%20Ticker%20Price%20Change%20Statistics" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH-USDT`</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiExchangeData.GetTickersAsync(System.Threading.CancellationToken)">
            <summary>
            Get ticker (24h price stats) for all symbols
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/market-api.html#24hr%20Ticker%20Price%20Change%20Statistics" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiExchangeData.GetBookTickerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the best ask and bid info
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/market-api.html#Symbol%20Order%20Book%20Ticker" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH-USDT`</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiExchangeData.GetMarkPriceKlinesAsync(System.String,BingX.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get mark price klines
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/market-api.html#Mark%20Price%20Kline/Candlestick%20Data" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH-USDT`</param>
            <param name="interval">Kline interval</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max amount of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiExchangeData.GetLastTradePriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the last trade price for a symbol
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/market-api.html#Symbol%20Price%20Ticker" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH-USDT`</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiExchangeData.GetLastTradePricesAsync(System.Threading.CancellationToken)">
            <summary>
            Get the last trade price for all symbols
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/market-api.html#Symbol%20Price%20Ticker" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiTrading">
            <summary>
            BingX futures trading endpoints, placing and mananging orders.
            </summary>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiTrading.GetPositionsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get positions
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/account-api.html#Query%20position%20data" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH-USDT`</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiTrading.PlaceTestOrderAsync(System.String,BingX.Net.Enums.OrderSide,BingX.Net.Enums.FuturesOrderType,BingX.Net.Enums.PositionSide,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{BingX.Net.Enums.TakeProfitStopLossMode},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{BingX.Net.Enums.TriggerType},System.Nullable{System.Boolean},System.Nullable{BingX.Net.Enums.TakeProfitStopLossMode},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{BingX.Net.Enums.TriggerType},System.Nullable{System.Boolean},System.Nullable{BingX.Net.Enums.TimeInForce},System.Nullable{System.Boolean},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.String,System.Threading.CancellationToken)">
            <summary>
            Place a new test order. Order won't actually get placed
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Test%20Order" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH-USDT`</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="quantity">Quantity</param>
            <param name="price">Limit price</param>
            <param name="positionSide">Position side</param>
            <param name="reduceOnly">Reduce only</param>
            <param name="stopPrice">Stop price</param>
            <param name="priceRate">Trailing percentage (between 0 and 1)</param>
            <param name="stopLossType">Stop loss order type</param>
            <param name="stopLossStopPrice">Stop loss trigger price</param>
            <param name="stopLossPrice">Stop loss order price</param>
            <param name="stopLossTriggerType">Stop loss trigger price type</param>
            <param name="stopLossStopGuaranteed">Stop loss stop guaranteed</param>
            <param name="takeProfitType">Take profit order type</param>
            <param name="takeProfitStopPrice">Take profit trigger price</param>
            <param name="takeProfitPrice">Take profit order price</param>
            <param name="takeProfitTriggerType">Take profit trigger price type</param>
            <param name="takeProfitStopGuaranteed">Take profit stop guaranteed</param>
            <param name="timeInForce">Time in force</param>
            <param name="closePosition">Close the position</param>
            <param name="triggerPrice">Trigger price</param>
            <param name="stopGuaranteed">Stop guaranteed</param>
            <param name="clientOrderId">Client order id</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiTrading.PlaceOrderAsync(System.String,BingX.Net.Enums.OrderSide,BingX.Net.Enums.FuturesOrderType,BingX.Net.Enums.PositionSide,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{BingX.Net.Enums.TakeProfitStopLossMode},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{BingX.Net.Enums.TriggerType},System.Nullable{System.Boolean},System.Nullable{BingX.Net.Enums.TakeProfitStopLossMode},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{BingX.Net.Enums.TriggerType},System.Nullable{System.Boolean},System.Nullable{BingX.Net.Enums.TimeInForce},System.Nullable{System.Boolean},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.String,System.Threading.CancellationToken)">
            <summary>
            Place a new order
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Place%20order" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH-USDT`</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="quantity">Quantity</param>
            <param name="price">Limit price</param>
            <param name="positionSide">Position side</param>
            <param name="reduceOnly">Reduce only</param>
            <param name="stopPrice">Stop price</param>
            <param name="priceRate">Trailing percentage (between 0 and 1)</param>
            <param name="stopLossType">Stop loss order type</param>
            <param name="stopLossStopPrice">Stop loss trigger price</param>
            <param name="stopLossPrice">Stop loss order price</param>
            <param name="stopLossTriggerType">Stop loss trigger price type</param>
            <param name="stopLossStopGuaranteed">Stop loss stop guaranteed</param>
            <param name="takeProfitType">Take profit order type</param>
            <param name="takeProfitStopPrice">Take profit trigger price</param>
            <param name="takeProfitPrice">Take profit order price</param>
            <param name="takeProfitTriggerType">Take profit trigger price type</param>
            <param name="takeProfitStopGuaranteed">Take profit stop guaranteed</param>
            <param name="timeInForce">Time in force</param>
            <param name="closePosition">Close the position</param>
            <param name="triggerPrice">Trigger price</param>
            <param name="stopGuaranteed">Stop guaranteed</param>
            <param name="clientOrderId">Client order id</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiTrading.PlaceMultipleOrderAsync(System.Collections.Generic.IEnumerable{BingX.Net.Objects.Models.BingXFuturesPlaceOrderRequest},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Place multiple new orders in one go
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Place%20multiple%20orders" /></para>
            </summary>
            <param name="orders">Orders to place</param>
            <param name="sync">When false (default): Parallel order processing, all orders need to target the same symbol. true: sequential order processing, orders can target different symbols</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiTrading.GetOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Threading.CancellationToken)">
            <summary>
            Get an order
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Query%20pending%20order%20status" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH-USDT`</param>
            <param name="orderId">Order id. Either this or clientOrderId should be provided</param>
            <param name="clientOrderId">Client order id. Either this or orderId should be provided</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiTrading.CancelOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel an order
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Cancel%20Order" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH-USDT`</param>
            <param name="orderId">Order id. Either this or clientOrderId should be provided</param>
            <param name="clientOrderId">Client order id. Either this or orderId should be provided</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiTrading.CloseAllPositionsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Close all positions. Positions will be closed via market order
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Close%20All%20Positions" /></para>
            </summary>
            <param name="symbol">Only close for a specific symbol</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiTrading.CancelMultipleOrderAsync(System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Cancel multiple orders on a symbol
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Cancel%20multiple%20orders" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH-USDT`</param>
            <param name="orderIds">The ids of orders to cancel</param>
            <param name="clientOrderIds">The client order ids of orders to cancel</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiTrading.CancelAllOrderAsync(System.String,System.Nullable{BingX.Net.Enums.OrderType},System.Threading.CancellationToken)">
            <summary>
            Cancel all open orders
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Cancel%20All%20Orders" /></para>
            </summary>
            <param name="symbol">Only cancel orders for this symbol</param>
            <param name="orderType">Only cancel orders of this type</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiTrading.GetOpenOrdersAsync(System.String,System.Nullable{BingX.Net.Enums.OrderType},System.Threading.CancellationToken)">
            <summary>
            Get all open orders
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Cancel%20All%20Open%20Orders" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETH-USDT`</param>
            <param name="orderType">Filter by type of order</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiTrading.GetLiquidationOrdersAsync(System.String,System.Nullable{BingX.Net.Enums.AutoCloseType},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get liquidation order history
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#User's%20Force%20Orders" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETH-USDT`</param>
            <param name="settleAsset">Filter by settlement asset, USDC or USDT</param>
            <param name="closeType">Filter by close type</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiTrading.GetClosedOrdersAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get closed orders
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Query%20Order%20history" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETH-USDT`</param>
            <param name="settleAsset">Filter by settlement asset, USDC or USDT</param>
            <param name="orderId">Filter by order id</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiTrading.GetUserTradesAsync(System.Nullable{System.Int64},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Get user trade history
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Query%20historical%20transaction%20orders" /></para>
            </summary>
            <param name="orderId">Filter by order id</param>
            <param name="settleAsset">Filter by settlement asset, USDC or USDT</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiTrading.GetUserTradesAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get user trade history
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Query%20historical%20transaction%20details" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="orderId">Filter by order id</param>
            <param name="settleAsset">Filter by settlement asset, USDC or USDT</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="fromId">Return results after this id</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiTrading.CancelAllOrdersAfterAsync(System.Boolean,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Cancel all order after a set period. Can be called contineously to maintain a rolling timeout
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Cancel%20All%20After" /></para>
            </summary>
            <param name="activate">True to activate the trigger, false to disable the trigger</param>
            <param name="cancelAfterSeconds">Seconds after which to cancel all orders, between 10 and 120</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiTrading.ClosePositionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Close a position by its id
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Close%20position%20by%20position%20ID" /></para>
            </summary>
            <param name="positionId">The id of the position to close</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiTrading.GetOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get all orders, max 7 days ago
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#All%20Orders" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETH-USDT`</param>
            <param name="orderId">Filter by order id</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiTrading.GetPositionAndMarginInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get position and margin info
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Position%20and%20Maintenance%20Margin%20Ratio" /></para>
            </summary>
            <param name="symbol">Symbol name, for example `ETH-USDT`</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiTrading.GetPositionHistoryAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get position close history
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Query%20Position%20History" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH-USDT`</param>
            <param name="positionId">Filter by position id</param>
            <param name="settleAsset">Filter by settlement asset, USDC or USDT</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiTrading.PlaceTwapOrderAsync(System.String,BingX.Net.Enums.OrderSide,BingX.Net.Enums.PositionSide,BingX.Net.Enums.PriceType,System.Decimal,System.Decimal,System.Int32,System.Decimal,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Place a new time weighted average price order
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Place%20TWAP%20Order" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH-USDT`</param>
            <param name="orderSide">Order side</param>
            <param name="positionSide">Position side</param>
            <param name="priceType">Price type</param>
            <param name="priceVariance">When type is constant, it represents the price difference (unit is USDT), when type is percentage, it represents the slippage ratio (unit is %)</param>
            <param name="triggerPrice">Trigger price</param>
            <param name="interval">After the strategic order is split, the time interval for order placing is between 5-120s.</param>
            <param name="orderQuantity">Maximum quantity for a single order</param>
            <param name="totalQuantity">Total quantity to trade</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiTrading.GetOpenTwapOrdersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get open Twap orders
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Query%20TWAP%20Entrusted%20Order" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETH-USDT`</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiTrading.GetClosedTwapOrdersAsync(System.String,System.Int32,System.Int32,System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Get closed Twap orders
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Query%20TWAP%20Historical%20Orders" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETH-USDT`</param>
            <param name="page">Page</param>
            <param name="pageSize">Page size</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiTrading.GetTwapOrderAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Get a Twap order by id
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Query%20TWAP%20Historical%20Orders" /></para>
            </summary>
            <param name="orderId">Order id</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiTrading.CancelTwapOrderAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Cancel Twap order
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Cancel%20TWAP%20Order" /></para>
            </summary>
            <param name="orderId">Main order id</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXSocketClientPerpetualFuturesApi">
            <summary>
            BingX futures streams
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXSocketClientPerpetualFuturesApi.SharedClient">
            <summary>
            Get the shared socket subscription client. This interface is shared with other exhanges to allow for a common implementation for different exchanges.
            </summary>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXSocketClientPerpetualFuturesApi.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{BingX.Net.Objects.Models.BingXFuturesTradeUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to live trade updates
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/socket/market.html#Subscribe%20the%20Latest%20Trade%20Detail" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH-USDT`</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXSocketClientPerpetualFuturesApi.SubscribeToPartialOrderBookUpdatesAsync(System.String,System.Int32,System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXOrderBook}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book updates
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/socket/market.html#Subscribe%20Market%20Depth%20Data" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH-USDT`</param>
            <param name="depth">Book depth, 5, 10, 20, 50 or 100</param>
            <param name="updateInterval">The update interval in ms, 100, 200, 500 or 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXSocketClientPerpetualFuturesApi.SubscribeToPartialOrderBookUpdatesAsync(System.Int32,System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXOrderBook}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book updates for all symbols
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/socket/market.html#Subscribe%20Market%20Depth%20Data%20of%20all%20trading%20pairs" /></para>
            </summary>
            <param name="depth">Book depth, 5, 10, 20, 50 or 100</param>
            <param name="updateInterval">The update interval in ms, 100, 200, 500 or 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXSocketClientPerpetualFuturesApi.SubscribeToKlineUpdatesAsync(System.String,BingX.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{BingX.Net.Objects.Models.BingXFuturesKlineUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to kline/candlestick updates
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/socket/market.html#Subscribe%20K-Line%20Data" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH-USDT`</param>
            <param name="interval">The kline interval</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXSocketClientPerpetualFuturesApi.SubscribeToKlineUpdatesAsync(BingX.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{BingX.Net.Objects.Models.BingXFuturesKlineUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to kline/candlestick updates for all symbols
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/socket/market.html#Subscribe%20K-Line%20Data" /></para>
            </summary>
            <param name="interval">The kline interval</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXSocketClientPerpetualFuturesApi.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXFuturesTickerUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to live price statistics updates
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/socket/market.html#Subscribe%20K-Line%20Data%20of%20all%20trading%20pairs" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH-USDT`</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXSocketClientPerpetualFuturesApi.SubscribeToTickerUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXFuturesTickerUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to live price statistics updates for all symbols
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/socket/market.html#Subscribe%20to%2024-hour%20price%20changes%20of%20all%20trading%20pairs" /></para>
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXSocketClientPerpetualFuturesApi.SubscribeToPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXPriceUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to live price updates
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/socket/market.html#Subscribe%20to%20latest%20price%20changes" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH-USDT`</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXSocketClientPerpetualFuturesApi.SubscribeToMarkPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXMarkPriceUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to live mark price updates
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/socket/market.html#Subscribe%20to%20latest%20mark%20price%20changes" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH-USDT`</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXSocketClientPerpetualFuturesApi.SubscribeToBookPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXBookTickerUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to live best book price updates
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/socket/market.html#Subscribe%20to%20the%20Book%20Ticker%20Streams" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH-USDT`</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXSocketClientPerpetualFuturesApi.SubscribeToUserDataUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXFuturesAccountUpdate}},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXFuturesOrderUpdate}},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXConfigUpdate}},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXListenKeyExpiredUpdate}},System.Threading.CancellationToken)">
            <summary>
            Listen to user data update events. Prior to using this, the <see cref="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiAccount.StartUserStreamAsync(System.Threading.CancellationToken)">restClient.PerpetualFuturesApi.Account.StartUserStreamAsync</see> method should be called to start the stream and obtaining a listen key.
            <para><a href="https://bingx-api.github.io/docs/#/en-us/swapV2/socket/account.html#listenKey%20expired%20push" /></para>
            </summary>
            <param name="listenKey">Listen key retrieved by the <see cref="M:BingX.Net.Interfaces.Clients.PerpetualFuturesApi.IBingXRestClientPerpetualFuturesApiAccount.StartUserStreamAsync(System.Threading.CancellationToken)">restClient.PerpetualFuturesApi.Account.StartUserStreamAsync</see> method</param>
            <param name="onAccountUpdate">Event handler for balance and position updates</param>
            <param name="onOrderUpdate">Event handler for order updates</param>
            <param name="onConfigurationUpdate">Event handler for account configuration updates</param>
            <param name="onListenKeyExpiredUpdate">Event handler for listenkey expired event</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientPerpetualFuturesApiShared">
            <summary>
            Shared interface for Perpetual futures rest API usage
            </summary>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.SpotApi.IBingXSocketClientPerpetualFuturesApiShared">
            <summary>
            Shared interface for Perpetual futures socket API usage
            </summary>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApi">
            <summary>
            BingX Spot API endpoints
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApi.Account">
            <summary>
            Endpoints related to account settings, info or actions
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApi.ExchangeData">
            <summary>
            Endpoints related to retrieving market and system data
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApi.Trading">
            <summary>
            Endpoints related to orders and trades
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApi.CommonSpotClient">
            <summary>
            DEPRECATED; use <see cref="T:CryptoExchange.Net.SharedApis.ISharedClient" /> instead for common/shared functionality. See <see href="https://jkorf.github.io/CryptoExchange.Net/docs/index.html#shared" /> for more info.
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApi.SharedClient">
            <summary>
            Get the shared rest requests client. This interface is shared with other exhanges to allow for a common implementation for different exchanges.
            </summary>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount">
            <summary>
            BingX Spot account endpoints. Account endpoints include balance info, withdraw/deposit info and requesting and account settings
            </summary>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <summary>
            Get balances
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/account-api.html#Query%20Assets" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.GetDepositHistoryAsync(System.String,System.Nullable{BingX.Net.Enums.DepositStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get deposit history
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/wallet-api.html#Deposit%20records" /></para>
            </summary>
            <param name="asset">Filter by asset, for example `ETH`</param>
            <param name="status">Filter by status</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="offset">Offset</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.GetWithdrawalHistoryAsync(System.String,System.String,System.String,System.Nullable{BingX.Net.Enums.WithdrawalStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get withdrawal history
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/wallet-api.html#Withdraw%20records" /></para>
            </summary>
            <param name="id">Filter by id</param>
            <param name="asset">Filter by asset, for example `ETH`</param>
            <param name="clientOrderId">Filter by client order id</param>
            <param name="status">Filter by status</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="offset">Offset</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.GetAssetsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get asset info
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/account-api.html#Query%20Assets" /></para>
            </summary>
            <param name="asset">Filter by asset name, for example `ETH`</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.WithdrawAsync(System.String,System.String,System.Decimal,BingX.Net.Enums.AccountType,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Withdraw funds
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/wallet-api.html#Withdraw" /></para>
            </summary>
            <param name="asset">The asset, for example `ETH`</param>
            <param name="address">Address to withdraw to</param>
            <param name="quantity">Quantity</param>
            <param name="walletType">Wallet type</param>
            <param name="network">Network to use</param>
            <param name="addressTag">Address tag</param>
            <param name="clientOrderId">Client order id</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.GetDepositAddressAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get deposit addresses
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/wallet-api.html#Main%20Account%20Deposit%20Address" /></para>
            </summary>
            <param name="asset">The asset, for example `ETH`</param>
            <param name="offset">Offset</param>
            <param name="limit">Limit</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.TransferAsync(BingX.Net.Enums.TransferType,System.String,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Universal transfer
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/account-api.html#Asset%20Transfer" /></para>
            </summary>
            <param name="tranferType">Transfer type</param>
            <param name="asset">Asset to transfer, for example `ETH`</param>
            <param name="quantity">Quantity to transfer</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.GetTransfersAsync(BingX.Net.Enums.TransferType,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get universal transfer history
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/account-api.html#Asset%20transfer%20records" /></para>
            </summary>
            <param name="type">Transaction type</param>
            <param name="transactionId">Filter by id</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">Page</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.TransferInternalAsync(System.String,BingX.Net.Enums.AccountIdentifierType,System.String,System.Decimal,BingX.Net.Enums.AccountType,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Transfer internal to an account on the BingX platform
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/account-api.html#Main%20Accoun%20internal%20transfer" /></para>
            </summary>
            <param name="asset">Asset, for example `ETH`</param>
            <param name="targetAccountType">Target account type</param>
            <param name="targetAccount">Target account</param>
            <param name="quantity">Quantity</param>
            <param name="accountType">Source account type</param>
            <param name="areaCode">Area code for telephone, required when targetAccountType is PhoneNumber</param>
            <param name="clientOrderId">Client order id</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.GetInternalTransfersAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get internal transfer history
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/account-api.html#Main%20account%20internal%20transfer%20records" /></para>
            </summary>
            <param name="asset">Asset, for example `ETH`</param>
            <param name="clientOrderId">Client order id</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="offset">Offset</param>
            <param name="limit">Limit</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.StartUserStreamAsync(System.Threading.CancellationToken)">
            <summary>
            Generate a listen key used for subscribing to user data streams with the socket client
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/socket/listenKey.html#generate%20Listen%20Key" /></para>
            </summary>
            <param name="ct"></param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.KeepAliveUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Extend the lifetime of a listenkey with 60 minutes
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/socket/listenKey.html#extend%20Listen%20Key%20Validity%20period" /></para>
            </summary>
            <param name="listenKey">Listen key</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.StopUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete a listenkey and stop the user data stream
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/socket/listenKey.html#delete%20Listen%20Key" /></para>
            </summary>
            <param name="listenKey">Listen key</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.GetTradingFeesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get trading fees for a symbol
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/trade-api.html#Query%20Trading%20Commission%20Rate" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH-USDT`</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.GetUserIdAsync(System.Threading.CancellationToken)">
            <summary>
            Get user id
            <para><a href="https://bingx-api.github.io/docs/#/en-us/common/sub-account#Query%20account%20uid" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.GetApiKeyPermissionsAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Get API key permissions and info
            <para><a href="https://bingx-api.github.io/docs/#/en-us/common/sub-account#Query%20the%20API%20Key%20of%20a%20sub-account" /></para>
            </summary>
            <param name="userId">The user id, can be retrieved with <see cref="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.GetUserIdAsync(System.Threading.CancellationToken)" /> </param>
            <param name="apiKey">Filter by API key</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiExchangeData">
            <summary>
            BingX Spot exchange data endpoints. Exchange data includes market data (tickers, order books, etc) and system status.
            </summary>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <summary>
            Get the server time
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/base-info.html#Server%20time" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiExchangeData.GetSymbolsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get symbol information
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/market-api.html#Spot%20trading%20symbols" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH-USDT`</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiExchangeData.GetRecentTradesAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get a list of the most recent trades
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/market-api.html#Recent%20Trades%20List" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH-USDT`</param>
            <param name="limit">Max amount of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiExchangeData.GetOrderBookAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get the orderbook for a symbol
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/market-api.html#Order%20Book" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH-USDT`</param>
            <param name="limit">Max amount of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiExchangeData.GetKlinesAsync(System.String,BingX.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get kline/candlestick data
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/market-api.html#Kline/Candlestick%20Data" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH-USDT`</param>
            <param name="interval">Kline interval</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max amount of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiExchangeData.GetTickersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get ticker (24h price statistics)
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/market-api.html#24hr%20Ticker%20Price%20Change%20Statistics" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETH-USDT`</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiExchangeData.GetAggregatedOrderBookAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get aggregated order book
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/market-api.html#Order%20Book%20aggregation" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH-USDT`</param>
            <param name="limit">Book depth</param>
            <param name="mergeDepth">0 is default precision, 1 to 5 are 10 to 100000 times precision respectively</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiExchangeData.GetLastTradeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the last trade for a symbol
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/market-api.html#Symbol%20Price%20Ticker" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH-USDT`</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiExchangeData.GetLastTradesAsync(System.Threading.CancellationToken)">
            <summary>
            Get the last trade for all symbols
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/market-api.html#Symbol%20Price%20Ticker" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiExchangeData.GetBookPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the current best book prices
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/market-api.html#Symbol%20Order%20Book%20Ticker" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH-USDT`</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Get historic trades
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/market-api.html#Old%20Trade%20Lookup" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH-USDT`</param>
            <param name="limit">Amount or results</param>
            <param name="fromId">Return trades after this id</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiShared">
            <summary>
            Shared interface for Spot rest API usage
            </summary>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiTrading">
            <summary>
            BingX Spot trading endpoints, placing and managing orders.
            </summary>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiTrading.PlaceOrderAsync(System.String,BingX.Net.Enums.OrderSide,BingX.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{BingX.Net.Enums.TimeInForce},System.Threading.CancellationToken)">
            <summary>
            Place a new order
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/trade-api.html#Place%20order" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH-USDT`</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="quantity">Order quantity</param>
            <param name="price">Order price for limit orders</param>
            <param name="quoteQuantity">Order quantity in quote asset</param>
            <param name="stopPrice">Stop price</param>
            <param name="clientOrderId">Client order id</param>
            <param name="timeInForce">Time in force</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiTrading.PlaceMultipleOrdersAsync(System.Collections.Generic.IEnumerable{BingX.Net.Objects.Models.BingXPlaceOrderRequest},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Place multiple orders
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/trade-api.html#Place%20multiple%20orders" /></para>
            </summary>
            <param name="orders">Orders to place</param>
            <param name="sync">When false (default): Parallel order processing, all orders need to target the same symbol. true: sequential order processing, orders can target different symbols</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiTrading.CancelOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel an active order
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/trade-api.html#Cancel%20Order" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH-USDT`</param>
            <param name="orderId">Order id, either this or clientOrderId should be provided</param>
            <param name="clientOrderId">Client order id, either this or orderId should be provided</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiTrading.CancelOrdersAsync(System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Cancel multiple active orders
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/trade-api.html#Cancel%20multiple%20orders" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH-USDT`</param>
            <param name="orderIds">The order ids to cancel</param>
            <param name="clientOrderIds">The client order ids to cancel</param>
            <param name="processPartialSuccess">When true the server will handle partially successful requests. When false the full request fails if any of the order cancellations fail.</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiTrading.CancelAllOrdersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel all active orders on a symbol
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/trade-api.html#Cancel%20all%20Open%20Orders%20on%20a%20Symbol" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH-USDT`</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiTrading.CancelAllOrdersAfterAsync(System.Boolean,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Cancel all order after a set period. Can be called contineously to maintain a rolling timeout
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/trade-api.html#Cancel%20All%20After" /></para>
            </summary>
            <param name="activate">True to activate the trigger, false to disable the trigger</param>
            <param name="cancelAfterSeconds">Seconds after which to cancel all orders, between 10 and 120</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiTrading.GetOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Threading.CancellationToken)">
            <summary>
            Get an order by orderId or clientOrderId
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/trade-api.html#Query%20Order%20details" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH-USDT`</param>
            <param name="orderId">Order id, either this or clientOrderId should be provided</param>
            <param name="clientOrderId">Client order id, either this or orderId should be provided</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiTrading.GetOpenOrdersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get open orders
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/trade-api.html#Current%20Open%20Orders" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETH-USDT`</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiTrading.GetOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{BingX.Net.Enums.OrderStatus},System.Nullable{BingX.Net.Enums.OrderType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get order history
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/trade-api.html#Query%20Order%20history" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETH-USDT`</param>
            <param name="orderId">Filter by order id</param>
            <param name="status">Filter by status</param>
            <param name="type">Filter by type</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">Page</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiTrading.GetUserTradesAsync(System.String,System.Nullable{System.Int64},System.Nullable{BingX.Net.Enums.OrderStatus},System.Nullable{BingX.Net.Enums.OrderType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get user trade history
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/trade-api.html#Query%20transaction%20details" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETH-USDT`</param>
            <param name="orderId">Filter by order id</param>
            <param name="status">Filter by status</param>
            <param name="type">Filter by type</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="fromId">Return trades after this id</param>
            <param name="limit">Max amount of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiTrading.PlaceOcoOrderAsync(System.String,BingX.Net.Enums.OrderSide,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Place a new OCO order
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/trade-api.html#Create%20an%20OCO%20Order" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH-USDT`</param>
            <param name="side">Order side</param>
            <param name="quantity">Quantity</param>
            <param name="limitPrice">Limit order price</param>
            <param name="orderPrice">The limit order price set after a stop-limit order is triggered</param>
            <param name="triggerPrice">The trigger price of the stop limit order</param>
            <param name="clientOrderId">Client order id</param>
            <param name="aboveClientOrderId">Client order id for the limit order</param>
            <param name="belowClientOrderId">Client order id for the stop limit order</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiTrading.CancelOcoOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel an OCO order
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/trade-api.html#Create%20an%20OCO%20Order" /></para>
            </summary>
            <param name="orderId">The order id. Either this or `clientOrderId` should be provided</param>
            <param name="clientOrderId">The client order id. Either this or `orderId` should be provided</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiTrading.GetOcoOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get a specific OCO order
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/trade-api.html#Query%20an%20OCO%20Order%20List" /></para>
            </summary>
            <param name="orderListId">The order list id. Either this or `clientOrderId` should be provided</param>
            <param name="clientOrderId">The client order id. Either this or `orderListId` should be provided</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiTrading.GetOpenOcoOrdersAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get open OCO orders
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/trade-api.html#Query%20All%20Open%20OCO%20Orders" /></para>
            </summary>
            <param name="page">Page</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiTrading.GetClosedOcoOrdersAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get closed OCO orders
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/trade-api.html#Query%20All%20Open%20OCO%20Orders" /></para>
            </summary>
            <param name="page">Page</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.SpotApi.IBingXSocketClientSpotApi">
            <summary>
            BingX spot streams
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.SpotApi.IBingXSocketClientSpotApi.SharedClient">
            <summary>
            Get the shared socket subscription client. This interface is shared with other exhanges to allow for a common implementation for different exchanges.
            </summary>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXSocketClientSpotApi.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXTradeUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to live trade updates
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/socket/market.html#Subscription%20transaction%20by%20transaction" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH-USDT`</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXSocketClientSpotApi.SubscribeToKlineUpdatesAsync(System.String,BingX.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXKlineUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to live kline/candlestick data updates
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/socket/market.html#K-line%20Streams" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH-USDT`</param>
            <param name="interval">The interval to subscribe. Currently only the 1 minute interval is supported</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXSocketClientSpotApi.SubscribeToPartialOrderBookUpdatesAsync(System.String,System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXOrderBook}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to live orderbook data updates
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/socket/market.html#Subscribe%20Market%20Depth%20Data" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH-USDT`</param>
            <param name="depth">The depth of the orderbook, 5, 10, 20, 50 or 100</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXSocketClientSpotApi.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXTickerUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to live price statistics updates
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/socket/market.html#Subscribe%20to%2024-hour%20Price%20Change" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH-USDT`</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXSocketClientSpotApi.SubscribeToPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXPriceUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to live price updates
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/socket/market.html#Subscribe%20to%20Latest%20Trade%20Price" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH-USDT`</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXSocketClientSpotApi.SubscribeToBookPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXBookTickerUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to live best book price updates
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/socket/market.html#Subscribe%20to%20Best%20Order%20Book" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH-USDT`</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXSocketClientSpotApi.SubscribeToOrderUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXOrderUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user order updates. Prior to using this, the <see cref="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.StartUserStreamAsync(System.Threading.CancellationToken)">restClient.SpotApi.Account.StartUserStreamAsync</see> method should be called to start the stream and obtaining a listen key.
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/socket/account.html#Subscription%20order%20update%20data" /></para>
            </summary>
            <param name="listenKey">Listen key retrieved by the <see cref="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.StartUserStreamAsync(System.Threading.CancellationToken)">restClient.SpotApi.Account.StartUserStreamAsync</see> method</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXSocketClientSpotApi.SubscribeToBalanceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXBalanceUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user balance updates. Prior to using this, the <see cref="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.StartUserStreamAsync(System.Threading.CancellationToken)">restClient.SpotApi.Account.StartUserStreamAsync</see> method should be called to start the stream and obtaining a listen key.
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/socket/account.html#Subscription%20account%20balance%20push" /></para>
            </summary>
            <param name="listenKey">Listen key retrieved by the <see cref="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.StartUserStreamAsync(System.Threading.CancellationToken)">restClient.SpotApi.Account.StartUserStreamAsync</see> method</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.SpotApi.IBingXSocketClientSpotApiShared">
            <summary>
            Shared interface for Spot socket API usage
            </summary>
        </member>
        <member name="T:BingX.Net.Interfaces.IBingXOrderBookFactory">
            <summary>
            BingX local order book factory
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.IBingXOrderBookFactory.Spot">
            <summary>
            Spot order book factory methods
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.IBingXOrderBookFactory.PerpetualFutures">
            <summary>
            Perpetual Futures order book factory methods
            </summary>
        </member>
        <member name="M:BingX.Net.Interfaces.IBingXOrderBookFactory.Create(CryptoExchange.Net.SharedApis.SharedSymbol,System.Action{BingX.Net.Objects.Options.BingXOrderBookOptions})">
            <summary>
            Create a SymbolOrderBook for the symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="options">Book options</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.IBingXOrderBookFactory.CreatePerpetualFutures(System.String,System.Action{BingX.Net.Objects.Options.BingXOrderBookOptions})">
            <summary>
            Create a new futures local order book instance
            </summary>
            <param name="symbol"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.IBingXOrderBookFactory.CreateSpot(System.String,System.Action{BingX.Net.Objects.Options.BingXOrderBookOptions})">
            <summary>
            Create a new spot local order book instance
            </summary>
            <param name="symbol"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:BingX.Net.Interfaces.IBingXTrackerFactory">
            <summary>
            Tracker factory
            </summary>
        </member>
        <member name="M:BingX.Net.Interfaces.IBingXTrackerFactory.CreateKlineTracker(CryptoExchange.Net.SharedApis.SharedSymbol,CryptoExchange.Net.SharedApis.SharedKlineInterval,System.Nullable{System.Int32},System.Nullable{System.TimeSpan})">
            <summary>
            Create a new kline tracker
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">Kline interval</param>
            <param name="limit">The max amount of klines to retain</param>
            <param name="period">The max period the data should be retained</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.IBingXTrackerFactory.CreateTradeTracker(CryptoExchange.Net.SharedApis.SharedSymbol,System.Nullable{System.Int32},System.Nullable{System.TimeSpan})">
            <summary>
            Create a new trade tracker for a symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="limit">The max amount of klines to retain</param>
            <param name="period">The max period the data should be retained</param>
            <returns></returns>
        </member>
        <member name="T:BingX.Net.Objects.BingXApiAddresses">
            <summary>
            Api addresses
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.BingXApiAddresses.RestClientAddress">
            <summary>
            The address used by the BingXRestClient for the API
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.BingXApiAddresses.SocketClientSpotAddress">
            <summary>
            The address used by the BingXSocketClient for the Spot websocket API
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.BingXApiAddresses.SocketClientSwapAddress">
            <summary>
            The address used by the BingXSocketClient for the Swap websocket API
            </summary>
        </member>
        <member name="F:BingX.Net.Objects.BingXApiAddresses.Default">
            <summary>
            The default addresses to connect to the BingX.com API
            </summary>
        </member>
        <member name="F:BingX.Net.Objects.BingXApiAddresses.Demo">
            <summary>
            The addresses to connect to the demo trading BingX.com API. Note that this only applies to trading VST
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXAmount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXAmount.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXApiKey">
            <summary>
            API key info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXApiKey.ApiKey">
            <summary>
            The api key
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXApiKey.Note">
            <summary>
            Note
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXApiKey.IpAddresses">
            <summary>
            IP address restrictions
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXApiKey.Permissions">
            <summary>
            IP address restrictions
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXApiKey.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXApiKey.CreateTime">
            <summary>
            Create time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXApiKey.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXAsset">
            <summary>
            Asset info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXAsset.Name">
            <summary>
            Name 
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXAsset.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXAsset.Networks">
            <summary>
            Networks
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXNetwork">
            <summary>
            Network info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXNetwork.Name">
            <summary>
            Network name
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXNetwork.Network">
            <summary>
            Network
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXNetwork.DepositEnabled">
            <summary>
            Is deposit enabled
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXNetwork.MinDeposit">
            <summary>
            Minimal deposit amount
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXNetwork.MinConfirmations">
            <summary>
            Min amount of confirmations
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXNetwork.IsDefault">
            <summary>
            Is default network
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXNetwork.WithdrawEnabled">
            <summary>
            Is withdrawing enabled
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXNetwork.WithdrawFee">
            <summary>
            Withdrawal fee
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXNetwork.MinWithdraw">
            <summary>
            Minimal withdrawal
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXNetwork.MaxWithdraw">
            <summary>
            Max withdrawal
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXNetwork.WithdrawDescription">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXNetwork.WithdrawPrecision">
            <summary>
            Witdraw precision
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXNetwork.DepositPrecision">
            <summary>
            Deposit precision
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXNetwork.ContractAddress">
            <summary>
            Contract address
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXBalance">
            <summary>
            Balance info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBalance.Asset">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBalance.Free">
            <summary>
            Free
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBalance.Locked">
            <summary>
            Locked
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBalance.Total">
            <summary>
            Total
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXBalanceUpdate">
            <summary>
            Balance update
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBalanceUpdate.UpdateTime">
            <summary>
            Timestamp of the update
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBalanceUpdate.EventData">
            <summary>
            Event info
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXBalanceItems">
            <summary>
            Balance change event data
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBalanceItems.Balances">
            <summary>
            Changed balances
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBalanceItems.UpdateType">
            <summary>
            The event that caused the update
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXBalanceItem">
            <summary>
            Balance update item
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBalanceItem.Asset">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBalanceItem.BalanceChange">
            <summary>
            Balance change
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBalanceItem.NewBalance">
            <summary>
            New balance
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBalanceItem.Total">
            <summary>
            Total balance
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBalanceItem.Locked">
            <summary>
            Locked balance
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXBookTicker">
            <summary>
            Best book prices
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBookTicker.EventType">
            <summary>
            Event type
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBookTicker.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBookTicker.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBookTicker.BestBidPrice">
            <summary>
            Best bid price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBookTicker.BestBidQuantity">
            <summary>
            Best bid quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBookTicker.BestAskPrice">
            <summary>
            Best ask price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBookTicker.BestAskQuantity">
            <summary>
            Best ask quantity
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXBookTickerUpdate">
            <summary>
            Best book prices
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBookTickerUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBookTickerUpdate.BestBidPrice">
            <summary>
            Best bid price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBookTickerUpdate.BestBidQuantity">
            <summary>
            Best bid quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBookTickerUpdate.BestAskPrice">
            <summary>
            Best ask price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBookTickerUpdate.BestAskQuantity">
            <summary>
            Best ask quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBookTickerUpdate.UpdateId">
            <summary>
            Last update id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBookTickerUpdate.UpdateTime">
            <summary>
            Last update time
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXCancelAfterResult">
            <summary>
            Cancel after timeout setting result
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXCancelAfterResult.TriggerTime">
            <summary>
            Trigger time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXCancelAfterResult.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXCancelAfterResult.Note">
            <summary>
            Note
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXCancelAllResult">
            <summary>
            Order cancelation result
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXCancelAllResult.Success">
            <summary>
            Successfully canceled orders
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXCancelAllResult.Failed">
            <summary>
            Failed order cancelation results
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXFailedCancel">
            <summary>
            Failed cancelation info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFailedCancel.OrderId">
            <summary>
            Id of order failed to cancel
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFailedCancel.ErrorCode">
            <summary>
            Error code
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFailedCancel.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXCancelsResult">
            <summary>
            Cancel result
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXCancelsResult.Orders">
            <summary>
            Successfully canceled orders
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXCancelsResult.Fails">
            <summary>
            Failed to cancel orders
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXClosePositionResult">
            <summary>
            Close position result
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXClosePositionResult.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXClosePositionResult.PositionId">
            <summary>
            Position id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXClosePositionResult.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXClosePositionResult.Side">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXClosePositionResult.Type">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXClosePositionResult.PositionSide">
            <summary>
            Position side
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXClosePositionResult.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXClosePositionsResult">
            <summary>
            Close positions result
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXClosePositionsResult.Success">
            <summary>
            Order ids of orders which successfully closed a position
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXClosePositionsResult.Failed">
            <summary>
            Order ids or orders which failed to close a position
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXConfigUpdate">
            <summary>
            Account configuration change update
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXConfigUpdate.Configuration">
            <summary>
            Configuration info
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXAssetConfig">
            <summary>
            Configuration info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXAssetConfig.Symbol">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXAssetConfig.LeverageLong">
            <summary>
            Long position leverage
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXAssetConfig.LeverageShort">
            <summary>
            Short position leverage
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXAssetConfig.MarginMode">
            <summary>
            Margin mode
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXContract">
            <summary>
            Perpetual futures contract info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXContract.ContractId">
            <summary>
            Contract id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXContract.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXContract.ContractSize">
            <summary>
            Size of a single contract
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXContract.QuantityPrecision">
            <summary>
            Quantity precision
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXContract.PricePrecision">
            <summary>
            Price precision
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXContract.FeeRate">
            <summary>
            Transaction fee rate
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXContract.MakerFeeRate">
            <summary>
            Maker fee rate
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXContract.TakerFeeRate">
            <summary>
            Taker fee rate
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXContract.MinOrderQuantity">
            <summary>
            Min order quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXContract.MinOrderValue">
            <summary>
            Trade minimal value in USDT
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXContract.MaxLongLeverage">
            <summary>
            Max long leverage
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXContract.MaxShortLeverage">
            <summary>
            Max short leverage
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXContract.Currency">
            <summary>
            Settlement and margin currency asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXContract.Asset">
            <summary>
            Contract trading asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXContract.Status">
            <summary>
            1: Online, 25:Suspended. Different unknown values have been observed. 
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXContract.ApiCanOpen">
            <summary>
            Can open positions from API
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXContract.ApiCanClose">
            <summary>
            Can close positions from API
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXContract.EnsureTrigger">
            <summary>
            Whether to support guaranteed stop loss.
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXContract.TriggerFeeRate">
            <summary>
            The fee rate for guaranteed stop loss.
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXContract.BrokerProhibited">
            <summary>
            Whether broker user transaction are prohibited
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXDeposit">
            <summary>
            Deposit info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDeposit.Quantity">
            <summary>
            Quantity 
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDeposit.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDeposit.Network">
            <summary>
            Used network
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDeposit.Status">
            <summary>
            Current status
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDeposit.Address">
            <summary>
            Deposit address
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDeposit.AddressTag">
            <summary>
            Address tag
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDeposit.SourceAddress">
            <summary>
            Source address
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDeposit.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDeposit.InsertTime">
            <summary>
            Insert time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDeposit.UnlockConfirmations">
            <summary>
            Confirmed times for unlocking
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDeposit.ConfirmedTimes">
            <summary>
            Network confirmations
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXDepositAddresses">
            <summary>
            Deposit addresses
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDepositAddresses.Total">
            <summary>
            Total
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDepositAddresses.Data">
            <summary>
            Results
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXDepositAddress">
            <summary>
            Deposit address
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDepositAddress.AssetId">
            <summary>
            Asset id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDepositAddress.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDepositAddress.Network">
            <summary>
            Network
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDepositAddress.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDepositAddress.Tag">
            <summary>
            Tag
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXFundingRate">
            <summary>
            Funding rate info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFundingRate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFundingRate.MarkPrice">
            <summary>
            Mark price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFundingRate.IndexPrice">
            <summary>
            Index price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFundingRate.LastFundingRate">
            <summary>
            Last funding rate
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFundingRate.NextFundingTime">
            <summary>
            Next funding time
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXFundingRateHistory">
            <summary>
            Funding rate history 
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFundingRateHistory.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFundingRateHistory.FundingRate">
            <summary>
            Funding rate
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFundingRateHistory.FundingTime">
            <summary>
            Funding time
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXFuturesBalance">
            <summary>
            Futures balances info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesBalance.UserId">
            <summary>
            User id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesBalance.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesBalance.Balance">
            <summary>
            Balance
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesBalance.Equity">
            <summary>
            Net asset value
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesBalance.UnrealizedProfit">
            <summary>
            Unrealized profit and loss
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesBalance.RealizedProfit">
            <summary>
            Realized profit
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesBalance.AvailableMargin">
            <summary>
            Available margin
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesBalance.UsedMargin">
            <summary>
            Used margin
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesBalance.FrozenMargin">
            <summary>
            Frozen margin
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesBalance.ShortUid">
            <summary>
            Short uid
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXFuturesAccountUpdate">
            <summary>
            Account update
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesAccountUpdate.Update">
            <summary>
            Account change info
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXFuturesAccountChange">
            <summary>
            Account change info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesAccountChange.Trigger">
            <summary>
            Event trigger reason
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesAccountChange.Balances">
            <summary>
            Balance changes
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesAccountChange.Positions">
            <summary>
            Position changes
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXFuturesBalanceChange">
            <summary>
            Balance change info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesBalanceChange.Asset">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesBalanceChange.Balance">
            <summary>
            Wallet balance
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesBalanceChange.BalanceExIsolatedMargin">
            <summary>
            Balance excluding isolated margin
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesBalanceChange.BalanceChange">
            <summary>
            Balance change
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXFuturesPositionChange">
            <summary>
            Position change info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesPositionChange.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesPositionChange.Size">
            <summary>
            Position size
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesPositionChange.EntryPrice">
            <summary>
            Entry price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesPositionChange.UnrealizedPnl">
            <summary>
            Unrealized profit and loss
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesPositionChange.MarginMode">
            <summary>
            Margin mode
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesPositionChange.PositionMargin">
            <summary>
            Position margin (isolated position)
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesPositionChange.Side">
            <summary>
            Position side
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesPositionChange.RealizedPnl">
            <summary>
            Realized profit and loss of positions
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXFuturesBookTicker">
            <summary>
            Best offer info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesBookTicker.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesBookTicker.BestBidPrice">
            <summary>
            Current best bid price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesBookTicker.BestBidQuantity">
            <summary>
            Current best bid quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesBookTicker.BestAskPrice">
            <summary>
            Current best ask price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesBookTicker.BestAskQuantity">
            <summary>
            Current best ask quantity
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXFuturesKline">
            <summary>
            Kline info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesKline.OpenPrice">
            <summary>
            Open price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesKline.ClosePrice">
            <summary>
            Close price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesKline.HighPrice">
            <summary>
            High price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesKline.LowPrice">
            <summary>
            Low price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesKline.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesKline.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXFuturesKlineUpdate">
            <summary>
            Kline info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesKlineUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesKlineUpdate.OpenPrice">
            <summary>
            Open price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesKlineUpdate.ClosePrice">
            <summary>
            Close price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesKlineUpdate.HighPrice">
            <summary>
            High price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesKlineUpdate.LowPrice">
            <summary>
            Low price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesKlineUpdate.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesKlineUpdate.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXFuturesMarkPriceKline">
            <summary>
            Mark price kline info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesMarkPriceKline.OpenPrice">
            <summary>
            Open price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesMarkPriceKline.ClosePrice">
            <summary>
            Close price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesMarkPriceKline.HighPrice">
            <summary>
            High price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesMarkPriceKline.LowPrice">
            <summary>
            Low price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesMarkPriceKline.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesMarkPriceKline.OpenTime">
            <summary>
            Open time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesMarkPriceKline.CloseTime">
            <summary>
            Close time
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXFuturesOrder">
            <summary>
            Order info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrder.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrder.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrder.Type">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrder.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrder.PositionSide">
            <summary>
            Position side
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrder.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrder.Price">
            <summary>
            Order price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrder.StopPrice">
            <summary>
            Stop price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrder.TriggerType">
            <summary>
            Price trigger type
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrder.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrder.StopGuaranteed">
            <summary>
            Stop guaranteed
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrder.TimeInForce">
            <summary>
            Time in force
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrder.PriceRate">
            <summary>
            Trailing stop price rate
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrder.ReduceOnly">
            <summary>
            Reduce only
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrder.TriggerPrice">
            <summary>
            Trigger price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrder.ClosePosition">
            <summary>
            Close position
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrder.Status">
            <summary>
            Order status
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXFuturesOrderBook">
            <summary>
            Order book info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderBook.Bids">
            <summary>
            List of bids where quantity is in contracts
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderBook.Asks">
            <summary>
            List of asks where quantity is in contracts
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderBook.BidsAsset">
            <summary>
            List of bids where quantity is in the quote asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderBook.AsksAsset">
            <summary>
            List of asks where quantity is in the quote asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderBook.Timestamp">
            <summary>
            Timestamp of the data
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXFuturesOrderDetails">
            <summary>
            Order info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.Symbol">
            <summary>   
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.Type">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.PositionSide">
            <summary>
            Position side
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.Price">
            <summary>
            Order price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.Quantity">
            <summary>
            Order quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.QuantityFilled">
            <summary>
            Quantity filled
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.ValueFilled">
            <summary>
            Value filled (price * quantity)
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.AveragePrice">
            <summary>
            Order average fill price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.Profit">
            <summary>
            Profit
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.Fee">
            <summary>
            Fee
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.Status">
            <summary>
            Order status
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.CreateTime">
            <summary>
            Create time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.UpdateTime">
            <summary>
            Last update time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.Leverage">
            <summary>
            Leverage
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.StopPrice">
            <summary>
            Stop price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.TriggerType">
            <summary>
            Price trigger type
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.StopGuaranteed">
            <summary>
            Stop guaranteed
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.TimeInForce">
            <summary>
            Time in force
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.PriceRate">
            <summary>
            Trailing stop price rate
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.ReduceOnly">
            <summary>
            Reduce only
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.TriggerPrice">
            <summary>
            Trigger price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.TrailingStopRate">
            <summary>
            Trailing stop rate
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.TrailingStopDistance">
            <summary>
            Trailing stop distance
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.ClosePosition">
            <summary>
            Close position
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.StopLoss">
            <summary>
            Stop loss order info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.TakeProfit">
            <summary>
            Take profit order info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.TriggerOrderId">
            <summary>
            Trigger order id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.PostOnly">
            <summary>
            Is post only order
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.IsTwap">
            <summary>
            Is part of a Time Weight Average Price Order
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderDetails.MainOrderId">
            <summary>
            The main order id if this order is part of a Twap order
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXStopOrder">
            <summary>
            Stop order info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXStopOrder.Type">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXStopOrder.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXStopOrder.StopPrice">
            <summary>
            Stop price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXStopOrder.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXStopOrder.TriggerType">
            <summary>
            Trigger type
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXStopOrder.StopGuaranteed">
            <summary>
            Stop guarenteed
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXFuturesOrderUpdate">
            <summary>
            Order update
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderUpdate.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderUpdate.Side">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderUpdate.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderUpdate.Price">
            <summary>
            Order price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderUpdate.Quantity">
            <summary>
            Order quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderUpdate.EventType">
            <summary>
            Order quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderUpdate.Status">
            <summary>
            Order status
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderUpdate.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderUpdate.QuantityFilled">
            <summary>
            Quantity filled
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderUpdate.Fee">
            <summary>
            Fee paid
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderUpdate.FeeAsset">
            <summary>
            Fee asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderUpdate.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderUpdate.VolumeFilled">
            <summary>
            Quantity filled in quote asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderUpdate.TriggerPrice">
            <summary>
            Trigger price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderUpdate.TriggerType">
            <summary>
            Trigger type
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderUpdate.AveragePrice">
            <summary>
            Average order price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderUpdate.PositionSide">
            <summary>
            Position side
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderUpdate.ProfitAndLoss">
            <summary>
            Profit and loss of the transaction
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesOrderUpdate.ReduceOnly">
            <summary>
            Reduce only
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXFuturesPlaceOrderRequest">
            <summary>
            Futures place order request for bulk placement
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesPlaceOrderRequest.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesPlaceOrderRequest.OrderType">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesPlaceOrderRequest.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesPlaceOrderRequest.PositionSide">
            <summary>
            Position side
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesPlaceOrderRequest.ReduceOnly">
            <summary>
            Reduce only
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesPlaceOrderRequest.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesPlaceOrderRequest.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesPlaceOrderRequest.StopPrice">
            <summary>
            Stop price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesPlaceOrderRequest.PriceRate">
            <summary>
            Price rate
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesPlaceOrderRequest.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesPlaceOrderRequest.TriggerType">
            <summary>
            Trigger type
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesPlaceOrderRequest.TimeInForce">
            <summary>
            Time in force
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesPlaceOrderRequest.ClosePosition">
            <summary>
            Close position
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesPlaceOrderRequest.TriggerPrice">
            <summary>
            Trigger price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesPlaceOrderRequest.StopGuaranteed">
            <summary>
            Stop guaranteed
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesPlaceOrderRequest.StopLoss">
            <summary>
            Stop loss order parameters
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesPlaceOrderRequest.TakeProfit">
            <summary>
            Take profit order parameters
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesPlaceOrderRequest.StopLossStr">
            <summary>
            Internal serialization parameter, use StopLoss for setting stop loss parameters
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesPlaceOrderRequest.TakeProfitStr">
            <summary>
            Internal serialization parameter, use TakeProfit for setting take profit parameters
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXStopOrderRequest">
            <summary>
            Stop order info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXStopOrderRequest.Type">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXStopOrderRequest.StopPrice">
            <summary>
            Stop price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXStopOrderRequest.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXStopOrderRequest.TriggerType">
            <summary>
            Trigger type
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXStopOrderRequest.StopGuaranteed">
            <summary>
            Stop guarenteed
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXFuturesTicker">
            <summary>
            24h Price statistics
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTicker.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTicker.OpenPrice">
            <summary>
            Open price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTicker.HighPrice">
            <summary>
            High price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTicker.LowPrice">
            <summary>
            Low price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTicker.LastPrice">
            <summary>
            Last price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTicker.LastQuantity">
            <summary>
            Last quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTicker.PriceChange">
            <summary>
            Price change
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTicker.PriceChangePercent">
            <summary>
            Price change percentage
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTicker.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTicker.QuoteVolume">
            <summary>
            Quote volume
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTicker.OpenTime">
            <summary>
            Open time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTicker.CloseTime">
            <summary>
            Close time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTicker.BestAskPrice">
            <summary>
            Best ask price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTicker.BestAskQuantity">
            <summary>
            Best ask quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTicker.BestBidPrice">
            <summary>
            Best bid price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTicker.BestBidQuantity">
            <summary>
            Best bid quantity
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXFuturesTickerUpdate">
            <summary>
            Ticker information over last 24h
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTickerUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTickerUpdate.PriceChange">
            <summary>
            Price change
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTickerUpdate.PriceChangePercentage">
            <summary>
            Price change percentage
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTickerUpdate.OpenPrice">
            <summary>
            Open price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTickerUpdate.HighPrice">
            <summary>
            High price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTickerUpdate.LowPrice">
            <summary>
            Low price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTickerUpdate.LastPrice">
            <summary>
            Last trade price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTickerUpdate.Turnover">
            <summary>
            Turnover in USDT
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTickerUpdate.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTickerUpdate.QuoteVolume">
            <summary>
            Volume in USDT
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTickerUpdate.OpenTime">
            <summary>
            Open time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTickerUpdate.CloseTime">
            <summary>
            Close time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTickerUpdate.BestBidPrice">
            <summary>
            Best bid price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTickerUpdate.BestBidQuantity">
            <summary>
            Best bid quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTickerUpdate.BestAskPrice">
            <summary>
            Best ask price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTickerUpdate.BestAskQuantity">
            <summary>
            Best ask quantity
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXFuturesTrade">
            <summary>
            Trade info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTrade.TradeId">
            <summary>
            Trade id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTrade.IdV1">
            <summary>
            Id for V1 API
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTrade.Price">
            <summary>
            Trade price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTrade.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTrade.Value">
            <summary>
            Trade value in quote asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTrade.Timestamp">
            <summary>
            timestamp
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTrade.BuyerIsMaker">
            <summary>
            Whether buyer was the maker
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXFuturesTradeUpdate">
            <summary>
            Trade update info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTradeUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTradeUpdate.Price">
            <summary>
            Trade price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTradeUpdate.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTradeUpdate.TradeTime">
            <summary>
            Trade timestamp
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTradeUpdate.BuyerIsMaker">
            <summary>
            Whether buyer is maker
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXFuturesTradingFees">
            <summary>
            Futures trading fee rates
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTradingFees.TakerFeeRate">
            <summary>
            Taker fee rate
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesTradingFees.MakerFeeRate">
            <summary>
            Maker fee rate
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXFuturesUserTrade">
            <summary>
            User trade info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesUserTrade.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesUserTrade.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesUserTrade.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesUserTrade.Price">
            <summary>
            Trade price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesUserTrade.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesUserTrade.Value">
            <summary>
            Value traded
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesUserTrade.Fee">
            <summary>
            Fee paid
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesUserTrade.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesUserTrade.Timestamp">
            <summary>
            Trade time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesUserTrade.LiquidatedPrice">
            <summary>
            Liquidation price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesUserTrade.LiquidatedMarginRatio">
            <summary>
            Liquidation margin ratio
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesUserTrade.TriggerPriceType">
            <summary>
            Stop price trigger type
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesUserTrade.Side">
            <summary>
            Trade side
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesUserTrade.Type">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesUserTrade.PositionSide">
            <summary>
            Position side
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXFuturesUserTradeDetails">
            <summary>
            User trade info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesUserTradeDetails.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesUserTradeDetails.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesUserTradeDetails.TradeId">
            <summary>
            Trade id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesUserTradeDetails.Price">
            <summary>
            Trade price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesUserTradeDetails.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesUserTradeDetails.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesUserTradeDetails.Fee">
            <summary>
            Fee paid
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesUserTradeDetails.FeeAsset">
            <summary>
            Fee asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesUserTradeDetails.Timestamp">
            <summary>
            Trade time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesUserTradeDetails.Side">
            <summary>
            Trade side
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesUserTradeDetails.PositionSide">
            <summary>
            Position side
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXFuturesUserTradeDetails.Role">
            <summary>
            Trade role
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXId">
            <summary>
            Id result
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXId.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXIncome">
            <summary>
            Income transaction
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXIncome.Symbol">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXIncome.IncomeType">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXIncome.Income">
            <summary>
            Income
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXIncome.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXIncome.Info">
            <summary>
            Additional info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXIncome.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXIncome.TradeId">
            <summary>
            Trade id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXIncome.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXInternalTransfers">
            <summary>
            Transfers
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXInternalTransfers.Total">
            <summary>
            Total transfers
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXInternalTransfers.Transfers">
            <summary>
            Transfer list
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXInternalTransfer">
            <summary>
            Transfer info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXInternalTransfer.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXInternalTransfer.Quantity">
            <summary>
            Quantity transfered
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXInternalTransfer.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXInternalTransfer.ReceiverUid">
            <summary>
            Receiver
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXInternalTransfer.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXIsolatedMarginResult">
            <summary>
            Set isolated margin result 
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXIsolatedMarginResult.Quantity">
            <summary>
            Adjusted quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXIsolatedMarginResult.Direction">
            <summary>
            Direction
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXKeyPermissions">
            <summary>
            Api key permissions
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKeyPermissions.ApiKey">
            <summary>
            Api key
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKeyPermissions.Permissions">
            <summary>
            Permissions
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKeyPermissions.IpAddresses">
            <summary>
            Ip addresses
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKeyPermissions.Note">
            <summary>
            Note
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXKline">
            <summary>
            Kline (candlestick) info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKline.OpenTime">
            <summary>
            Open timestamp
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKline.OpenPrice">
            <summary>
            Open price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKline.HighPrice">
            <summary>
            High price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKline.LowPrice">
            <summary>
            Low price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKline.ClosePrice">
            <summary>
            Close price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKline.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKline.CloseTime">
            <summary>
            Close time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKline.QuoteVolume">
            <summary>
            Quote volume
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXKlineUpdate">
            <summary>
            Kline (candlestick) update
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKlineUpdate.Kline">
            <summary>
            Kline data
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKlineUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXKlineUpdateData">
            <summary>
            Kline (candlestick) info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKlineUpdateData.OpenTime">
            <summary>
            Open timestamp
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKlineUpdateData.OpenPrice">
            <summary>
            Open price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKlineUpdateData.HighPrice">
            <summary>
            High price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKlineUpdateData.LowPrice">
            <summary>
            Low price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKlineUpdateData.ClosePrice">
            <summary>
            Close price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKlineUpdateData.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKlineUpdateData.CloseTime">
            <summary>
            Close time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKlineUpdateData.QuoteVolume">
            <summary>
            Quote volume
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKlineUpdateData.TradeCount">
            <summary>
            Number of trades
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXLastTrade">
            <summary>
            Last trade info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLastTrade.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLastTrade.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLastTrade.TradeId">
            <summary>
            Trade id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLastTrade.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLastTrade.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLastTrade.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLastTrade.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXLastTradePrice">
            <summary>
            Last trade price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLastTradePrice.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLastTradePrice.Price">
            <summary>
            Last traded price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLastTradePrice.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXLeverage">
            <summary>
            Leverage info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLeverage.LongLeverage">
            <summary>
            Long position leverage
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLeverage.ShortLeverage">
            <summary>
            Short position leverage
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLeverage.MaxLongLeverage">
            <summary>
            Max long position leverage
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLeverage.MaxShortLeverage">
            <summary>
            Max short position leverage
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLeverage.AvailableLongVolume">
            <summary>
            Available Long Volume
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLeverage.AvailableShortVolume">
            <summary>
            Available Short Volume
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLeverage.AvailableLongValue">
            <summary>
            Available Long Value
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLeverage.AvailableShortValue">
            <summary>
            Available Short Value
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLeverage.MaxPositionLongValue">
            <summary>
            Maximum Position Long Value
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLeverage.MaxPositionShortValue">
            <summary>
            Maximum Position Short Value
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXLeverageResult">
            <summary>
            Set leverage result
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLeverageResult.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLeverageResult.Leverage">
            <summary>
            Leverage
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLeverageResult.AvailableLongVolume">
            <summary>
            Available Long Volume
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLeverageResult.AvailableShortVolume">
            <summary>
            Available Short Volume
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLeverageResult.AvailableLongValue">
            <summary>
            Available Long Value
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLeverageResult.AvailableShortValue">
            <summary>
            Available Short Value
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLeverageResult.MaxPositionLongValue">
            <summary>
            Maximum Position Long Value
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLeverageResult.MaxPositionShortValue">
            <summary>
            Maximum Position Short Value
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXListenKeyExpiredUpdate">
            <summary>
            Listenkey has expired
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXListenKeyExpiredUpdate.ListenKey">
            <summary>
            The listen key
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXMarginAsset">
            <summary>
            Margin asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXMarginAsset.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXMarginAsset.TotalQuantity">
            <summary>
            Total quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXMarginAsset.AvailableTransfer">
            <summary>
            Available transfer
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXMarginAsset.LatestMortgageQuantity">
            <summary>
            Latest mortgage quantity
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXMarginHistory">
            <summary>
            Margin change info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXMarginHistory.Records">
            <summary>
            Records
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXMarginHistory.Total">
            <summary>
            Total amount of records
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXMarginHistoryEntry">
            <summary>
            Margin change info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXMarginHistoryEntry.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXMarginHistoryEntry.PositionId">
            <summary>
            Position id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXMarginHistoryEntry.ChangeReason">
            <summary>
            Change reason
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXMarginHistoryEntry.MarginChange">
            <summary>
            Margin change
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXMarginHistoryEntry.MarginAfterChange">
            <summary>
            Margin after change
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXMarginHistoryEntry.Timestamp">
            <summary>
            Time of change
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXMarginMode">
            <summary>
            Margin mode info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXMarginMode.MarginMode">
            <summary>
            Margin mode
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXMarkPriceUpdate">
            <summary>
            Mark price update
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXMarkPriceUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXMarkPriceUpdate.MarkPrice">
            <summary>
            The current mark price
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXMultiAssetMode">
            <summary>
            Multi asset mode
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXMultiAssetMode.AssetMode">
            <summary>
            Asset mode
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXMultiAssetRules">
            <summary>
            Multi asset mode rules
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXMultiAssetRules.MarginAssets">
            <summary>
            Margin assets
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXMultiAssetRules.Ltv">
            <summary>
            Loan to value ratio
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXMultiAssetRules.CollateralValueRatio">
            <summary>
            Collateral value ratio
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXMultiAssetRules.MaxTransfer">
            <summary>
            Max transfer
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXMultiAssetRules.IndexPrice">
            <summary>
            Index price
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXOcoOrder">
            <summary>
            OCO order info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOcoOrder.TransactionTime">
            <summary>
            Transaction time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOcoOrder.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOcoOrder.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOcoOrder.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOcoOrder.OrderType">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOcoOrder.Side">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOcoOrder.TriggerPrice">
            <summary>
            Trigger price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOcoOrder.Price">
            <summary>
            Order price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOcoOrder.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOcoOrder.OrderListId">
            <summary>
            Order list id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOcoOrder.Status">
            <summary>
            Order status
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXOpenInterest">
            <summary>
            Open interest info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOpenInterest.OpenInterest">
            <summary>
            Open interest
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOpenInterest.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOpenInterest.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXOrder">
            <summary>
            Order info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrder.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrder.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrder.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrder.Price">
            <summary>
            Order price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrder.StopPrice">
            <summary>
            Stop price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrder.Quantity">
            <summary>
            Order quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrder.QuantityFilled">
            <summary>
            Quantity filled
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrder.ValueFilled">
            <summary>
            Total value filled (price * quantity)
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrder.Status">
            <summary>
            Order status
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrder.Type">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrder.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrder.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXOrderBook">
            <summary>
            Order book info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderBook.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderBook.Bids">
            <summary>
            List of bids
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderBook.Asks">
            <summary>
            List of asks
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderBook.Timestamp">
            <summary>
            Timestamp of the data
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderBook.T">
            <summary>
            Futures timestamp
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXOrderBookEntry">
            <summary>
            Order book entry
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderBookEntry.Price">
            <summary>
            The price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderBookEntry.Quantity">
            <summary>
            The quantity
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXOrderDetails">
            <summary>
            Order info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderDetails.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderDetails.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderDetails.Price">
            <summary>
            Order price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderDetails.StopPrice">
            <summary>
            Stop price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderDetails.Quantity">
            <summary>
            Order quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderDetails.QuantityFilled">
            <summary>
            Quantity filled
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderDetails.ValueFilled">
            <summary>
            Total value filled (price * quantity)
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderDetails.Status">
            <summary>
            Order status
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderDetails.Type">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderDetails.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderDetails.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderDetails.CreateTime">
            <summary>
            Creation timestamp
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderDetails.UpdateTime">
            <summary>
            Update timestamp
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderDetails.QuoteQuantity">
            <summary>
            Original quote order quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderDetails.Fee">
            <summary>
            Fee paid
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderDetails.FeeAsset">
            <summary>
            The fee asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderDetails.AveragePrice">
            <summary>
            Average fill price
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXOrderError">
            <summary>
            Error result
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderError.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderError.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXOrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderId.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderId.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXOrderUpdate">
            <summary>
            Order update
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderUpdate.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderUpdate.Side">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderUpdate.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderUpdate.Price">
            <summary>
            Order price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderUpdate.Quantity">
            <summary>
            Order quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderUpdate.EventType">
            <summary>
            Order quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderUpdate.Status">
            <summary>
            Order status
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderUpdate.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderUpdate.LastFillQuantity">
            <summary>
            Quantity of the last fill for this order
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderUpdate.LastFillPrice">
            <summary>
            Price of the last fill for this order
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderUpdate.QuantityFilled">
            <summary>
            Quantity filled
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderUpdate.Fee">
            <summary>
            Fee paid
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderUpdate.FeeAsset">
            <summary>
            Fee asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderUpdate.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderUpdate.CreateTime">
            <summary>
            Creation time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderUpdate.TradeId">
            <summary>
            Trade id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderUpdate.VolumeFilled">
            <summary>
            Quantity filled in quote asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderUpdate.LastFillValue">
            <summary>
            Last fill value
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderUpdate.QuoteOrderQuantity">
            <summary>
            Original quote order quantity
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXPlaceOrderRequest">
            <summary>
            Order to place
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPlaceOrderRequest.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPlaceOrderRequest.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPlaceOrderRequest.Type">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPlaceOrderRequest.TimeInForce">
            <summary>
            Time in force
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPlaceOrderRequest.StopPrice">
            <summary>
            Stop price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPlaceOrderRequest.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPlaceOrderRequest.QuoteOrderQuantity">
            <summary>
            Quantity in quote asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPlaceOrderRequest.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPlaceOrderRequest.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXPosition">
            <summary>
            Position information
            </summary> 
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPosition.PositionId">
            <summary>
            Position id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPosition.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPosition.Currency">
            <summary>
            Currency
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPosition.Size">
            <summary>
            Position size
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPosition.Available">
            <summary>
            Availalbe quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPosition.PositionValue">
            <summary>
            Value of the position
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPosition.Side">
            <summary>
            Position side
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPosition.Isolated">
            <summary>
            Is isolated margin mode
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPosition.AveragePrice">
            <summary>
            Average open price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPosition.InitialMargin">
            <summary>
            Initial margin
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPosition.Margin">
            <summary>
            Margin
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPosition.MarkPrice">
            <summary>
            Mark price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPosition.MaxMarginReduction">
            <summary>
            Maximum margin reduction
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPosition.OnlyOnePosition">
            <summary>
            Max margin reduction
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPosition.Leverage">
            <summary>
            Leverage
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPosition.UnrealizedProfit">
            <summary>
            Unrealized profit
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPosition.RealizedProfit">
            <summary>
            Realized profit
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPosition.RiskRate">
            <summary>
            Risk rate
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPosition.LiquidationPrice">
            <summary>
            Liquidation price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPosition.UnrealizedPnlRatio">
            <summary>
            Unrealized Profit and loss ratio
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPosition.UpdateTime">
            <summary>
            Last update timestamp
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXPositionHistory">
            <summary>
            Position history
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPositionHistory.PositionId">
            <summary>
            Position id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPositionHistory.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPositionHistory.Isolated">
            <summary>
            Isolated (true) or Cross (false) margin mode
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPositionHistory.PositionSide">
            <summary>
            Position side
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPositionHistory.OpenTime">
            <summary>
            Open time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPositionHistory.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPositionHistory.AveragePrice">
            <summary>
            Average price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPositionHistory.AverageClosePrice">
            <summary>
            Average close price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPositionHistory.RealisedPnl">
            <summary>
            Realised profit and loss
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPositionHistory.NetPnl">
            <summary>
            Net profit and loss
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPositionHistory.PositionQuantity">
            <summary>
            Position quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPositionHistory.ClosePositionQuantity">
            <summary>
            Close position quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPositionHistory.Leverage">
            <summary>
            Leverage
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPositionHistory.CloseAllPositions">
            <summary>
            Are all positions closed
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPositionHistory.PositionFee">
            <summary>
            Position fee
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPositionHistory.TotalFunding">
            <summary>
            Total funding
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXPositionMarginInfo">
            <summary>
            Position and maintanance margin ratio info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPositionMarginInfo.Tier">
            <summary>
            Tier
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPositionMarginInfo.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPositionMarginInfo.MinPositionValue">
            <summary>
            Minimal position value
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPositionMarginInfo.MaxPositionValue">
            <summary>
            Max position value
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPositionMarginInfo.MaintenanceMarginRatio">
            <summary>
            Maintenance margin ratio
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPositionMarginInfo.MaintenanceAmount">
            <summary>
            Maintenance amount
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXPositionMode">
            <summary>
            Position mode
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPositionMode.PositionMode">
            <summary>
            Position mode
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXPriceUpdate">
            <summary>
            Price update
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPriceUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPriceUpdate.Price">
            <summary>
            The current last traded price
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXSocketUpdate">
            <summary>
            Socket update
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXSocketUpdate.Event">
            <summary>
            Event name
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXSocketUpdate.EventTime">
            <summary>
            Event timestamp
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXSymbol">
            <summary>
            BingX symbol info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXSymbol.Name">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXSymbol.MinOrderQuantity">
            <summary>
            Min order quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXSymbol.MaxOrderQuantity">
            <summary>
            Max order quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXSymbol.MinNotional">
            <summary>
            Min notional value of an order
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXSymbol.MaxNotional">
            <summary>
            Max notional value of an order
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXSymbol.Status">
            <summary>
            Symbol status
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXSymbol.TickSize">
            <summary>
            Tick size
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXSymbol.StepSize">
            <summary>
            Step size
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXSymbol.ApiBuyable">
            <summary>
            Is this symbol buyable via the API
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXSymbol.ApiSellable">
            <summary>
            Is this symbol sellable via the API
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXSymbol.TimeOnline">
            <summary>
            Time online
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXSymbol.TimeOffline">
            <summary>
            Time offline
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXSymbol.TimeMaintenance">
            <summary>
            Maintenance online
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXTicker">
            <summary>
            24 hour price statistics
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.OpenPrice">
            <summary>
            Open price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.HighPrice">
            <summary>
            High price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.LowPrice">
            <summary>
            Low price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.LastPrice">
            <summary>
            Last price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.PriceChange">
            <summary>
            Price change
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.PriceChangePercent">
            <summary>
            Price change percentage
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.QuoteVolume">
            <summary>
            Quote volume
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.OpenTime">
            <summary>
            Open time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.CloseTime">
            <summary>
            Close time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.BestAskPrice">
            <summary>
            Best ask price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.BestAskQuantity">
            <summary>
            Best ask quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.BestBidPrice">
            <summary>
            Best bid price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.BestBidQuantity">
            <summary>
            Best bid quantity
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXTickerUpdate">
            <summary>
            Ticker information over last 24h
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.PriceChange">
            <summary>
            Price change
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.PriceChangePercentage">
            <summary>
            Price change percentage
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.OpenPrice">
            <summary>
            Open price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.HighPrice">
            <summary>
            High price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.LowPrice">
            <summary>
            Low price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.LastPrice">
            <summary>
            Last trade price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.QuoteVolume">
            <summary>
            Quote volume
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.OpenTime">
            <summary>
            Open time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.CloseTime">
            <summary>
            Close time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.BestBidPrice">
            <summary>
            Best bid price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.BestBidQuantity">
            <summary>
            Best bid quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.BestAskPrice">
            <summary>
            Best ask price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.BestAskQuantity">
            <summary>
            Best ask quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.TradeCount">
            <summary>
            Trade count
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXTrade">
            <summary>
            Trade info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTrade.Id">
            <summary>
            Trade id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTrade.Price">
            <summary>
            Trade price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTrade.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTrade.Timestamp">
            <summary>
            timestamp
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTrade.BuyerIsMaker">
            <summary>
            Whether buyer was the maker
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXTradeUpdate">
            <summary>
            Trade update info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTradeUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTradeUpdate.TradeId">
            <summary>
            Trade id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTradeUpdate.Price">
            <summary>
            Trade price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTradeUpdate.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTradeUpdate.TradeTime">
            <summary>
            Trade timestamp
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTradeUpdate.BuyerIsMaker">
            <summary>
            Whether buyer is maker
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXTradingFees">
            <summary>
            Trading fee info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTradingFees.TakerFeeRate">
            <summary>
            Taker fee rate
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTradingFees.MakerFeeRate">
            <summary>
            Maker fee rate
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXTransactionResult">
            <summary>
            Transaction result
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTransactionResult.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXTransfers">
            <summary>
            Transfers
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTransfers.Total">
            <summary>
            Total transfers
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTransfers.Transfers">
            <summary>
            Transfer list
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXTransfer">
            <summary>
            Transfer info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTransfer.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTransfer.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTransfer.Quantity">
            <summary>
            Quantity transfered
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTransfer.Type">
            <summary>
            Transfer type
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTransfer.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTransfer.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXTwapOrderId">
            <summary>
            Twap order id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTwapOrderId.MainOrderId">
            <summary>
            Main order id
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXTwapOrders">
            <summary>
            Twap order list
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTwapOrders.List">
            <summary>
            List
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTwapOrders.Total">
            <summary>
            Total orders
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXTwapOrder">
            <summary>
            Twap order info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTwapOrder.MainOrderId">
            <summary>
            Main order id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTwapOrder.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTwapOrder.Side">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTwapOrder.PositionSide">
            <summary>
            Position side
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTwapOrder.PriceType">
            <summary>
            Price type
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTwapOrder.PriceVariance">
            <summary>
            Price variance
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTwapOrder.TriggerPrice">
            <summary>
            Trigger price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTwapOrder.Interval">
            <summary>
            Interval
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTwapOrder.QuantityPerOrder">
            <summary>
            Quantity per order
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTwapOrder.TotalQuantity">
            <summary>
            Total quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTwapOrder.OrderStatus">
            <summary>
            Order status
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTwapOrder.ExecutedQuantity">
            <summary>
            Executed quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTwapOrder.Duration">
            <summary>
            Execution time, in seconds
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTwapOrder.MaxDuration">
            <summary>
            Maximum execution time execution time in seconds
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTwapOrder.CreateTime">
            <summary>
            Creation time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTwapOrder.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXUserId">
            <summary>
            BingX user id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXUserId.UserId">
            <summary>
            User id
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXUserTrade">
            <summary>
            User trade info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXUserTrade.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXUserTrade.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXUserTrade.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXUserTrade.Price">
            <summary>
            Trade price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXUserTrade.Quantity">
            <summary>
            Quantity traded
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXUserTrade.Value">
            <summary>
            Value traded in quote asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXUserTrade.Fee">
            <summary>
            Fee paid
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXUserTrade.FeeAsset">
            <summary>
            Fee asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXUserTrade.Timestamp">
            <summary>
            Trade time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXUserTrade.IsBuyer">
            <summary>
            Is buyer
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXUserTrade.IsMaker">
            <summary>
            Is maker
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXWithdrawal">
            <summary>
            Withdrawal info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXWithdrawal.Address">
            <summary>
            Withdrawal address
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXWithdrawal.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXWithdrawal.ApplyTime">
            <summary>
            Apply time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXWithdrawal.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXWithdrawal.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXWithdrawal.Network">
            <summary>
            Withdrawal network
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXWithdrawal.Status">
            <summary>
            Withdrawal status
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXWithdrawal.transferType">
            <summary>
            Transfer type
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXWithdrawal.Fee">
            <summary>
            Fee
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXWithdrawal.Confirmations">
            <summary>
            Confirmations
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXWithdrawal.AddressTag">
            <summary>
            Address tag
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXWithdrawal.Info">
            <summary>
            Extra info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXWithdrawal.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXWithdrawResult">
            <summary>
            Withdraw result
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXWithdrawResult.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXWithdrawResult.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Options.BingXOptions">
            <summary>
            BingX services options
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Options.BingXOrderBookOptions">
            <summary>
            Options for the BingX SymbolOrderBook
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXOrderBookOptions.Default">
            <summary>
            Default options for new clients
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXOrderBookOptions.Limit">
            <summary>
            The top amount of results to keep in sync. If for example limit=10 is used, the order book will contain the 10 best bids and 10 best asks. Leaving this null will sync the full order book
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXOrderBookOptions.InitialDataTimeout">
            <summary>
            After how much time we should consider the connection dropped if no data is received for this time after the initial subscriptions
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Options.BingXRestOptions">
            <summary>
            Options for the BingXRestClient
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXRestOptions.Default">
            <summary>
            Default options for new clients
            </summary>
        </member>
        <member name="M:BingX.Net.Objects.Options.BingXRestOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXRestOptions.ReceiveWindow">
            <summary>
            The receive window
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXRestOptions.BrokerId">
            <summary>
            Broker id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXRestOptions.SpotOptions">
            <summary>
            Spot API options
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXRestOptions.FuturesOptions">
            <summary>
            Futures API options
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Options.BingXSocketOptions">
            <summary>
            Options for the BingXSocketClient
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXSocketOptions.Default">
            <summary>
            Default options for new clients
            </summary>
        </member>
        <member name="M:BingX.Net.Objects.Options.BingXSocketOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXSocketOptions.SpotOptions">
            <summary>
            Options for the Spot API
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXSocketOptions.FuturesOptions">
            <summary>
            Options for the Futures API
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Sockets.Subscriptions.BingXBalanceSubscription">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Objects.Sockets.Subscriptions.BingXBalanceSubscription.ListenerIdentifiers">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Objects.Sockets.Subscriptions.BingXBalanceSubscription.GetMessageType(CryptoExchange.Net.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Objects.Sockets.Subscriptions.BingXBalanceSubscription.#ctor(Microsoft.Extensions.Logging.ILogger,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXBalanceUpdate}})">
            <summary>
            ctor
            </summary>
            <param name="logger"></param>
            <param name="handler"></param>
        </member>
        <member name="M:BingX.Net.Objects.Sockets.Subscriptions.BingXBalanceSubscription.GetSubQuery(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Objects.Sockets.Subscriptions.BingXBalanceSubscription.GetUnsubQuery">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Objects.Sockets.Subscriptions.BingXBalanceSubscription.DoHandleMessage(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Objects.Sockets.DataEvent{System.Object})">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Objects.Sockets.Subscriptions.BingXSubscription`1">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Objects.Sockets.Subscriptions.BingXSubscription`1.ListenerIdentifiers">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Objects.Sockets.Subscriptions.BingXSubscription`1.GetMessageType(CryptoExchange.Net.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Objects.Sockets.Subscriptions.BingXSubscription`1.#ctor(Microsoft.Extensions.Logging.ILogger,System.String,System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{`0}},System.Boolean)">
            <summary>
            ctor
            </summary>
            <param name="logger"></param>
            <param name="dataType"></param>
            <param name="listenId"></param>
            <param name="handler"></param>
            <param name="auth"></param>
        </member>
        <member name="M:BingX.Net.Objects.Sockets.Subscriptions.BingXSubscription`1.GetSubQuery(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Objects.Sockets.Subscriptions.BingXSubscription`1.GetUnsubQuery">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Objects.Sockets.Subscriptions.BingXSubscription`1.DoHandleMessage(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Objects.Sockets.DataEvent{System.Object})">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Objects.Sockets.Subscriptions.BingXUserDataSubscription.ListenerIdentifiers">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Objects.Sockets.Subscriptions.BingXUserDataSubscription.GetMessageType(CryptoExchange.Net.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Objects.Sockets.Subscriptions.BingXUserDataSubscription.#ctor(Microsoft.Extensions.Logging.ILogger,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXFuturesAccountUpdate}},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXFuturesOrderUpdate}},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXConfigUpdate}},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXListenKeyExpiredUpdate}})">
            <summary>
            ctor
            </summary>
            <param name="logger"></param>
            <param name="orderHandler"></param>
            <param name="configHandler"></param>
            <param name="accountHandler"></param>
            <param name="listenkeyHandler"></param>
        </member>
        <member name="M:BingX.Net.Objects.Sockets.Subscriptions.BingXUserDataSubscription.GetSubQuery(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Objects.Sockets.Subscriptions.BingXUserDataSubscription.GetUnsubQuery">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Objects.Sockets.Subscriptions.BingXUserDataSubscription.DoHandleMessage(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Objects.Sockets.DataEvent{System.Object})">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.SymbolOrderBooks.BingXOrderBookFactory">
            <summary>
            BingX order book factory
            </summary>
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXOrderBookFactory.#ctor(System.IServiceProvider)">
            <summary>
            ctor
            </summary>
            <param name="serviceProvider">Service provider for resolving logging and clients</param>
        </member>
        <member name="P:BingX.Net.SymbolOrderBooks.BingXOrderBookFactory.Spot">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.SymbolOrderBooks.BingXOrderBookFactory.PerpetualFutures">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXOrderBookFactory.Create(CryptoExchange.Net.SharedApis.SharedSymbol,System.Action{BingX.Net.Objects.Options.BingXOrderBookOptions})">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXOrderBookFactory.CreateSpot(System.String,System.Action{BingX.Net.Objects.Options.BingXOrderBookOptions})">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXOrderBookFactory.CreatePerpetualFutures(System.String,System.Action{BingX.Net.Objects.Options.BingXOrderBookOptions})">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.SymbolOrderBooks.BingXPerpetualFuturesSymbolOrderBook">
            <summary>
            Implementation for a synchronized order book. After calling Start the order book will sync itself and keep up to date with new data. It will automatically try to reconnect and resync in case of a lost/interrupted connection.
            Make sure to check the State property to see if the order book is synced.
            </summary>
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXPerpetualFuturesSymbolOrderBook.#ctor(System.String,System.Action{BingX.Net.Objects.Options.BingXOrderBookOptions})">
            <summary>
            Create a new order book instance
            </summary>
            <param name="symbol">The symbol the order book is for</param>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXPerpetualFuturesSymbolOrderBook.#ctor(System.String,System.Action{BingX.Net.Objects.Options.BingXOrderBookOptions},Microsoft.Extensions.Logging.ILoggerFactory,BingX.Net.Interfaces.Clients.IBingXRestClient,BingX.Net.Interfaces.Clients.IBingXSocketClient)">
            <summary>
            Create a new order book instance
            </summary>
            <param name="symbol">The symbol the order book is for</param>
            <param name="optionsDelegate">Option configuration delegate</param>
            <param name="logger">Logger</param>
            <param name="restClient">Rest client instance</param>
            <param name="socketClient">Socket client instance</param>
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXPerpetualFuturesSymbolOrderBook.DoStartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXPerpetualFuturesSymbolOrderBook.DoResyncAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXPerpetualFuturesSymbolOrderBook.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.SymbolOrderBooks.BingXSpotSymbolOrderBook">
            <summary>
            Implementation for a synchronized order book. After calling Start the order book will sync itself and keep up to date with new data. It will automatically try to reconnect and resync in case of a lost/interrupted connection.
            Make sure to check the State property to see if the order book is synced.
            </summary>
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXSpotSymbolOrderBook.#ctor(System.String,System.Action{BingX.Net.Objects.Options.BingXOrderBookOptions})">
            <summary>
            Create a new order book instance
            </summary>
            <param name="symbol">The symbol the order book is for</param>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXSpotSymbolOrderBook.#ctor(System.String,System.Action{BingX.Net.Objects.Options.BingXOrderBookOptions},Microsoft.Extensions.Logging.ILoggerFactory,BingX.Net.Interfaces.Clients.IBingXRestClient,BingX.Net.Interfaces.Clients.IBingXSocketClient)">
            <summary>
            Create a new order book instance
            </summary>
            <param name="symbol">The symbol the order book is for</param>
            <param name="optionsDelegate">Option configuration delegate</param>
            <param name="logger">Logger</param>
            <param name="restClient">Rest client instance</param>
            <param name="socketClient">Socket client instance</param>
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXSpotSymbolOrderBook.DoStartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXSpotSymbolOrderBook.DoResyncAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXSpotSymbolOrderBook.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:CryptoExchange.Net.Interfaces.CryptoClientExtensions">
            <summary>
            Extensions for the ICryptoRestClient and ICryptoSocketClient interfaces
            </summary>
        </member>
        <member name="M:CryptoExchange.Net.Interfaces.CryptoClientExtensions.BingX(CryptoExchange.Net.Interfaces.ICryptoRestClient)">
            <summary>
            Get the BingX REST Api client
            </summary>
            <param name="baseClient"></param>
            <returns></returns>
        </member>
        <member name="M:CryptoExchange.Net.Interfaces.CryptoClientExtensions.BingX(CryptoExchange.Net.Interfaces.ICryptoSocketClient)">
            <summary>
            Get the BingX Websocket Api client
            </summary>
            <param name="baseClient"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions">
            <summary>
            Extensions for DI
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddBingX(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Add services such as the IBingXRestClient and IBingXSocketClient. Configures the services based on the provided configuration.
            </summary>
            <param name="services">The service collection</param>
            <param name="configuration">The configuration(section) containing the options</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddBingX(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{BingX.Net.Objects.Options.BingXOptions})">
            <summary>
            Add services such as the IBingXRestClient and IBingXSocketClient. Services will be configured based on the provided options.
            </summary>
            <param name="services">The service collection</param>
            <param name="optionsDelegate">Set options for the BingX services</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddBingX(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{BingX.Net.Objects.Options.BingXRestOptions},System.Action{BingX.Net.Objects.Options.BingXSocketOptions},System.Nullable{Microsoft.Extensions.DependencyInjection.ServiceLifetime})">
            <summary>
            DEPRECATED; use <see cref="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddBingX(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{BingX.Net.Objects.Options.BingXOptions})" /> instead
            </summary>
        </member>
    </members>
</doc>
